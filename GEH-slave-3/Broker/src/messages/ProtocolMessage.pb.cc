// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtocolMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace freedm {
namespace broker {

namespace {

const ::google::protobuf::Descriptor* ProtocolMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolMessage_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProtocolMessageWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolMessageWindow_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtocolMessage_2eproto() {
  protobuf_AddDesc_ProtocolMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtocolMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ProtocolMessage_descriptor_ = file->message_type(0);
  static const int ProtocolMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, sequence_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, module_message_),
  };
  ProtocolMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolMessage_descriptor_,
      ProtocolMessage::default_instance_,
      ProtocolMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolMessage));
  ProtocolMessage_Status_descriptor_ = ProtocolMessage_descriptor_->enum_type(0);
  ProtocolMessageWindow_descriptor_ = file->message_type(1);
  static const int ProtocolMessageWindow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessageWindow, source_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessageWindow, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessageWindow, messages_),
  };
  ProtocolMessageWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolMessageWindow_descriptor_,
      ProtocolMessageWindow::default_instance_,
      ProtocolMessageWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessageWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolMessageWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolMessageWindow));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtocolMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolMessage_descriptor_, &ProtocolMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolMessageWindow_descriptor_, &ProtocolMessageWindow::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtocolMessage_2eproto() {
  delete ProtocolMessage::default_instance_;
  delete ProtocolMessage_reflection_;
  delete ProtocolMessageWindow::default_instance_;
  delete ProtocolMessageWindow_reflection_;
}

void protobuf_AddDesc_ProtocolMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::freedm::broker::protobuf_AddDesc_ModuleMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ProtocolMessage.proto\022\rfreedm.broker\032\023"
    "ModuleMessage.proto\"\210\002\n\017ProtocolMessage\022"
    "\024\n\014sequence_num\030\003 \002(\r\022\023\n\013expire_time\030\004 \001"
    "(\t\0225\n\006status\030\005 \002(\0162%.freedm.broker.Proto"
    "colMessage.Status\022\014\n\004kill\030\006 \001(\005\022\014\n\004hash\030"
    "\007 \001(\006\0224\n\016module_message\030\010 \001(\0132\034.freedm.b"
    "roker.ModuleMessage\"A\n\006Status\022\013\n\007CREATED"
    "\020\001\022\014\n\010ACCEPTED\020\002\022\017\n\013BAD_REQUEST\020\003\022\013\n\007MES"
    "SAGE\020\004\"q\n\025ProtocolMessageWindow\022\023\n\013sourc"
    "e_uuid\030\001 \002(\t\022\021\n\tsend_time\030\002 \002(\t\0220\n\010messa"
    "ges\030\003 \003(\0132\036.freedm.broker.ProtocolMessag"
    "e", 441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtocolMessage.proto", &protobuf_RegisterTypes);
  ProtocolMessage::default_instance_ = new ProtocolMessage();
  ProtocolMessageWindow::default_instance_ = new ProtocolMessageWindow();
  ProtocolMessage::default_instance_->InitAsDefaultInstance();
  ProtocolMessageWindow::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtocolMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtocolMessage_2eproto {
  StaticDescriptorInitializer_ProtocolMessage_2eproto() {
    protobuf_AddDesc_ProtocolMessage_2eproto();
  }
} static_descriptor_initializer_ProtocolMessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtocolMessage_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolMessage_Status_descriptor_;
}
bool ProtocolMessage_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProtocolMessage_Status ProtocolMessage::CREATED;
const ProtocolMessage_Status ProtocolMessage::ACCEPTED;
const ProtocolMessage_Status ProtocolMessage::BAD_REQUEST;
const ProtocolMessage_Status ProtocolMessage::MESSAGE;
const ProtocolMessage_Status ProtocolMessage::Status_MIN;
const ProtocolMessage_Status ProtocolMessage::Status_MAX;
const int ProtocolMessage::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProtocolMessage::kSequenceNumFieldNumber;
const int ProtocolMessage::kExpireTimeFieldNumber;
const int ProtocolMessage::kStatusFieldNumber;
const int ProtocolMessage::kKillFieldNumber;
const int ProtocolMessage::kHashFieldNumber;
const int ProtocolMessage::kModuleMessageFieldNumber;
#endif  // !_MSC_VER

ProtocolMessage::ProtocolMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.ProtocolMessage)
}

void ProtocolMessage::InitAsDefaultInstance() {
  module_message_ = const_cast< ::freedm::broker::ModuleMessage*>(&::freedm::broker::ModuleMessage::default_instance());
}

ProtocolMessage::ProtocolMessage(const ProtocolMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.ProtocolMessage)
}

void ProtocolMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_num_ = 0u;
  expire_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 1;
  kill_ = 0;
  hash_ = GOOGLE_ULONGLONG(0);
  module_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolMessage::~ProtocolMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.ProtocolMessage)
  SharedDtor();
}

void ProtocolMessage::SharedDtor() {
  if (expire_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete expire_time_;
  }
  if (this != default_instance_) {
    delete module_message_;
  }
}

void ProtocolMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolMessage_descriptor_;
}

const ProtocolMessage& ProtocolMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessage_2eproto();
  return *default_instance_;
}

ProtocolMessage* ProtocolMessage::default_instance_ = NULL;

ProtocolMessage* ProtocolMessage::New() const {
  return new ProtocolMessage;
}

void ProtocolMessage::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    sequence_num_ = 0u;
    if (has_expire_time()) {
      if (expire_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        expire_time_->clear();
      }
    }
    status_ = 1;
    kill_ = 0;
    hash_ = GOOGLE_ULONGLONG(0);
    if (has_module_message()) {
      if (module_message_ != NULL) module_message_->::freedm::broker::ModuleMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.ProtocolMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence_num = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_num_)));
          set_has_sequence_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_expire_time;
        break;
      }

      // optional string expire_time = 4;
      case 4: {
        if (tag == 34) {
         parse_expire_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expire_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->expire_time().data(), this->expire_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "expire_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .freedm.broker.ProtocolMessage.Status status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::freedm::broker::ProtocolMessage_Status_IsValid(value)) {
            set_status(static_cast< ::freedm::broker::ProtocolMessage_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kill;
        break;
      }

      // optional int32 kill = 6;
      case 6: {
        if (tag == 48) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_hash;
        break;
      }

      // optional fixed64 hash = 7;
      case 7: {
        if (tag == 57) {
         parse_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_module_message;
        break;
      }

      // optional .freedm.broker.ModuleMessage module_message = 8;
      case 8: {
        if (tag == 66) {
         parse_module_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.ProtocolMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.ProtocolMessage)
  return false;
#undef DO_
}

void ProtocolMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.ProtocolMessage)
  // required uint32 sequence_num = 3;
  if (has_sequence_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_num(), output);
  }

  // optional string expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expire_time().data(), this->expire_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "expire_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->expire_time(), output);
  }

  // required .freedm.broker.ProtocolMessage.Status status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // optional int32 kill = 6;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->kill(), output);
  }

  // optional fixed64 hash = 7;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->hash(), output);
  }

  // optional .freedm.broker.ModuleMessage module_message = 8;
  if (has_module_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->module_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.ProtocolMessage)
}

::google::protobuf::uint8* ProtocolMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.ProtocolMessage)
  // required uint32 sequence_num = 3;
  if (has_sequence_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_num(), target);
  }

  // optional string expire_time = 4;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->expire_time().data(), this->expire_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "expire_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->expire_time(), target);
  }

  // required .freedm.broker.ProtocolMessage.Status status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // optional int32 kill = 6;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->kill(), target);
  }

  // optional fixed64 hash = 7;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->hash(), target);
  }

  // optional .freedm.broker.ModuleMessage module_message = 8;
  if (has_module_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->module_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.ProtocolMessage)
  return target;
}

int ProtocolMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence_num = 3;
    if (has_sequence_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_num());
    }

    // optional string expire_time = 4;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expire_time());
    }

    // required .freedm.broker.ProtocolMessage.Status status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 kill = 6;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

    // optional fixed64 hash = 7;
    if (has_hash()) {
      total_size += 1 + 8;
    }

    // optional .freedm.broker.ModuleMessage module_message = 8;
    if (has_module_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolMessage::MergeFrom(const ProtocolMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_num()) {
      set_sequence_num(from.sequence_num());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_module_message()) {
      mutable_module_message()->::freedm::broker::ModuleMessage::MergeFrom(from.module_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolMessage::CopyFrom(const ProtocolMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_module_message()) {
    if (!this->module_message().IsInitialized()) return false;
  }
  return true;
}

void ProtocolMessage::Swap(ProtocolMessage* other) {
  if (other != this) {
    std::swap(sequence_num_, other->sequence_num_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(status_, other->status_);
    std::swap(kill_, other->kill_);
    std::swap(hash_, other->hash_);
    std::swap(module_message_, other->module_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolMessage_descriptor_;
  metadata.reflection = ProtocolMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtocolMessageWindow::kSourceUuidFieldNumber;
const int ProtocolMessageWindow::kSendTimeFieldNumber;
const int ProtocolMessageWindow::kMessagesFieldNumber;
#endif  // !_MSC_VER

ProtocolMessageWindow::ProtocolMessageWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.ProtocolMessageWindow)
}

void ProtocolMessageWindow::InitAsDefaultInstance() {
}

ProtocolMessageWindow::ProtocolMessageWindow(const ProtocolMessageWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.ProtocolMessageWindow)
}

void ProtocolMessageWindow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolMessageWindow::~ProtocolMessageWindow() {
  // @@protoc_insertion_point(destructor:freedm.broker.ProtocolMessageWindow)
  SharedDtor();
}

void ProtocolMessageWindow::SharedDtor() {
  if (source_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_uuid_;
  }
  if (send_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete send_time_;
  }
  if (this != default_instance_) {
  }
}

void ProtocolMessageWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolMessageWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolMessageWindow_descriptor_;
}

const ProtocolMessageWindow& ProtocolMessageWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessage_2eproto();
  return *default_instance_;
}

ProtocolMessageWindow* ProtocolMessageWindow::default_instance_ = NULL;

ProtocolMessageWindow* ProtocolMessageWindow::New() const {
  return new ProtocolMessageWindow;
}

void ProtocolMessageWindow::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_source_uuid()) {
      if (source_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_uuid_->clear();
      }
    }
    if (has_send_time()) {
      if (send_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        send_time_->clear();
      }
    }
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolMessageWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.ProtocolMessageWindow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_uuid().data(), this->source_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_send_time;
        break;
      }

      // required string send_time = 2;
      case 2: {
        if (tag == 18) {
         parse_send_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->send_time().data(), this->send_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "send_time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_messages;
        break;
      }

      // repeated .freedm.broker.ProtocolMessage messages = 3;
      case 3: {
        if (tag == 26) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_messages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.ProtocolMessageWindow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.ProtocolMessageWindow)
  return false;
#undef DO_
}

void ProtocolMessageWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.ProtocolMessageWindow)
  // required string source_uuid = 1;
  if (has_source_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_uuid().data(), this->source_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_uuid(), output);
  }

  // required string send_time = 2;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->send_time().data(), this->send_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->send_time(), output);
  }

  // repeated .freedm.broker.ProtocolMessage messages = 3;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.ProtocolMessageWindow)
}

::google::protobuf::uint8* ProtocolMessageWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.ProtocolMessageWindow)
  // required string source_uuid = 1;
  if (has_source_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_uuid().data(), this->source_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_uuid(), target);
  }

  // required string send_time = 2;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->send_time().data(), this->send_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "send_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->send_time(), target);
  }

  // repeated .freedm.broker.ProtocolMessage messages = 3;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.ProtocolMessageWindow)
  return target;
}

int ProtocolMessageWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string source_uuid = 1;
    if (has_source_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_uuid());
    }

    // required string send_time = 2;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_time());
    }

  }
  // repeated .freedm.broker.ProtocolMessage messages = 3;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolMessageWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolMessageWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolMessageWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolMessageWindow::MergeFrom(const ProtocolMessageWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_uuid()) {
      set_source_uuid(from.source_uuid());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolMessageWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolMessageWindow::CopyFrom(const ProtocolMessageWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolMessageWindow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void ProtocolMessageWindow::Swap(ProtocolMessageWindow* other) {
  if (other != this) {
    std::swap(source_uuid_, other->source_uuid_);
    std::swap(send_time_, other->send_time_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolMessageWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolMessageWindow_descriptor_;
  metadata.reflection = ProtocolMessageWindow_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace broker
}  // namespace freedm

// @@protoc_insertion_point(global_scope)
