// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateCollection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StateCollection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace freedm {
namespace broker {
namespace sc {

namespace {

const ::google::protobuf::Descriptor* MarkerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceSignalStateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceSignalStateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceSignalRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceSignalRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectedStateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectedStateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateCollectionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateCollectionMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StateCollection_2eproto() {
  protobuf_AddDesc_StateCollection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StateCollection.proto");
  GOOGLE_CHECK(file != NULL);
  MarkerMessage_descriptor_ = file->message_type(0);
  static const int MarkerMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMessage, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMessage, device_),
  };
  MarkerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarkerMessage_descriptor_,
      MarkerMessage::default_instance_,
      MarkerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarkerMessage));
  DeviceSignalStateMessage_descriptor_ = file->message_type(1);
  static const int DeviceSignalStateMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalStateMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalStateMessage, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalStateMessage, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalStateMessage, count_),
  };
  DeviceSignalStateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceSignalStateMessage_descriptor_,
      DeviceSignalStateMessage::default_instance_,
      DeviceSignalStateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalStateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalStateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceSignalStateMessage));
  StateMessage_descriptor_ = file->message_type(2);
  static const int StateMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMessage, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMessage, marker_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMessage, marker_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMessage, device_signal_state_message_),
  };
  StateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMessage_descriptor_,
      StateMessage::default_instance_,
      StateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMessage));
  DeviceSignalRequestMessage_descriptor_ = file->message_type(3);
  static const int DeviceSignalRequestMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalRequestMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalRequestMessage, signal_),
  };
  DeviceSignalRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceSignalRequestMessage_descriptor_,
      DeviceSignalRequestMessage::default_instance_,
      DeviceSignalRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceSignalRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceSignalRequestMessage));
  RequestMessage_descriptor_ = file->message_type(4);
  static const int RequestMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, device_signal_request_message_),
  };
  RequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMessage_descriptor_,
      RequestMessage::default_instance_,
      RequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMessage));
  CollectedStateMessage_descriptor_ = file->message_type(5);
  static const int CollectedStateMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectedStateMessage, gateway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectedStateMessage, generation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectedStateMessage, storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectedStateMessage, drain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectedStateMessage, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectedStateMessage, num_intransit_accepts_),
  };
  CollectedStateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectedStateMessage_descriptor_,
      CollectedStateMessage::default_instance_,
      CollectedStateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectedStateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectedStateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectedStateMessage));
  StateCollectionMessage_descriptor_ = file->message_type(6);
  static const int StateCollectionMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCollectionMessage, marker_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCollectionMessage, state_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCollectionMessage, request_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCollectionMessage, collected_state_message_),
  };
  StateCollectionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateCollectionMessage_descriptor_,
      StateCollectionMessage::default_instance_,
      StateCollectionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCollectionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCollectionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateCollectionMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StateCollection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarkerMessage_descriptor_, &MarkerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceSignalStateMessage_descriptor_, &DeviceSignalStateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMessage_descriptor_, &StateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceSignalRequestMessage_descriptor_, &DeviceSignalRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMessage_descriptor_, &RequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectedStateMessage_descriptor_, &CollectedStateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateCollectionMessage_descriptor_, &StateCollectionMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StateCollection_2eproto() {
  delete MarkerMessage::default_instance_;
  delete MarkerMessage_reflection_;
  delete DeviceSignalStateMessage::default_instance_;
  delete DeviceSignalStateMessage_reflection_;
  delete StateMessage::default_instance_;
  delete StateMessage_reflection_;
  delete DeviceSignalRequestMessage::default_instance_;
  delete DeviceSignalRequestMessage_reflection_;
  delete RequestMessage::default_instance_;
  delete RequestMessage_reflection_;
  delete CollectedStateMessage::default_instance_;
  delete CollectedStateMessage_reflection_;
  delete StateCollectionMessage::default_instance_;
  delete StateCollectionMessage_reflection_;
}

void protobuf_AddDesc_StateCollection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025StateCollection.proto\022\020freedm.broker.s"
    "c\";\n\rMarkerMessage\022\016\n\006source\030\001 \002(\t\022\n\n\002id"
    "\030\002 \002(\005\022\016\n\006device\030\003 \003(\t\"V\n\030DeviceSignalSt"
    "ateMessage\022\014\n\004type\030\001 \002(\t\022\016\n\006signal\030\002 \002(\t"
    "\022\r\n\005value\030\003 \002(\002\022\r\n\005count\030\004 \002(\005\"\230\001\n\014State"
    "Message\022\016\n\006source\030\001 \002(\t\022\023\n\013marker_uuid\030\002"
    " \002(\t\022\022\n\nmarker_int\030\003 \002(\005\022O\n\033device_signa"
    "l_state_message\030\004 \003(\0132*.freedm.broker.sc"
    ".DeviceSignalStateMessage\":\n\032DeviceSigna"
    "lRequestMessage\022\014\n\004type\030\001 \002(\t\022\016\n\006signal\030"
    "\002 \002(\t\"u\n\016RequestMessage\022\016\n\006module\030\001 \002(\t\022"
    "S\n\035device_signal_request_message\030\002 \003(\0132,"
    ".freedm.broker.sc.DeviceSignalRequestMes"
    "sage\"\212\001\n\025CollectedStateMessage\022\017\n\007gatewa"
    "y\030\001 \003(\001\022\022\n\ngeneration\030\002 \003(\001\022\017\n\007storage\030\003"
    " \003(\001\022\r\n\005drain\030\004 \003(\001\022\r\n\005state\030\005 \003(\001\022\035\n\025nu"
    "m_intransit_accepts\030\006 \002(\005\"\215\002\n\026StateColle"
    "ctionMessage\0227\n\016marker_message\030\002 \001(\0132\037.f"
    "reedm.broker.sc.MarkerMessage\0225\n\rstate_m"
    "essage\030\003 \001(\0132\036.freedm.broker.sc.StateMes"
    "sage\0229\n\017request_message\030\004 \001(\0132 .freedm.b"
    "roker.sc.RequestMessage\022H\n\027collected_sta"
    "te_message\030\005 \001(\0132\'.freedm.broker.sc.Coll"
    "ectedStateMessage", 937);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StateCollection.proto", &protobuf_RegisterTypes);
  MarkerMessage::default_instance_ = new MarkerMessage();
  DeviceSignalStateMessage::default_instance_ = new DeviceSignalStateMessage();
  StateMessage::default_instance_ = new StateMessage();
  DeviceSignalRequestMessage::default_instance_ = new DeviceSignalRequestMessage();
  RequestMessage::default_instance_ = new RequestMessage();
  CollectedStateMessage::default_instance_ = new CollectedStateMessage();
  StateCollectionMessage::default_instance_ = new StateCollectionMessage();
  MarkerMessage::default_instance_->InitAsDefaultInstance();
  DeviceSignalStateMessage::default_instance_->InitAsDefaultInstance();
  StateMessage::default_instance_->InitAsDefaultInstance();
  DeviceSignalRequestMessage::default_instance_->InitAsDefaultInstance();
  RequestMessage::default_instance_->InitAsDefaultInstance();
  CollectedStateMessage::default_instance_->InitAsDefaultInstance();
  StateCollectionMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StateCollection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StateCollection_2eproto {
  StaticDescriptorInitializer_StateCollection_2eproto() {
    protobuf_AddDesc_StateCollection_2eproto();
  }
} static_descriptor_initializer_StateCollection_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MarkerMessage::kSourceFieldNumber;
const int MarkerMessage::kIdFieldNumber;
const int MarkerMessage::kDeviceFieldNumber;
#endif  // !_MSC_VER

MarkerMessage::MarkerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.sc.MarkerMessage)
}

void MarkerMessage::InitAsDefaultInstance() {
}

MarkerMessage::MarkerMessage(const MarkerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.sc.MarkerMessage)
}

void MarkerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkerMessage::~MarkerMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.sc.MarkerMessage)
  SharedDtor();
}

void MarkerMessage::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void MarkerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkerMessage_descriptor_;
}

const MarkerMessage& MarkerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateCollection_2eproto();
  return *default_instance_;
}

MarkerMessage* MarkerMessage::default_instance_ = NULL;

MarkerMessage* MarkerMessage::New() const {
  return new MarkerMessage;
}

void MarkerMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    id_ = 0;
  }
  device_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarkerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.sc.MarkerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device;
        break;
      }

      // repeated string device = 3;
      case 3: {
        if (tag == 26) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device(this->device_size() - 1).data(),
            this->device(this->device_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.sc.MarkerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.sc.MarkerMessage)
  return false;
#undef DO_
}

void MarkerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.sc.MarkerMessage)
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated string device = 3;
  for (int i = 0; i < this->device_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->device(i).data(), this->device(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "device");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.sc.MarkerMessage)
}

::google::protobuf::uint8* MarkerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.sc.MarkerMessage)
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated string device = 3;
  for (int i = 0; i < this->device_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device(i).data(), this->device(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->device(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.sc.MarkerMessage)
  return target;
}

int MarkerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated string device = 3;
  total_size += 1 * this->device_size();
  for (int i = 0; i < this->device_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarkerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarkerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarkerMessage::MergeFrom(const MarkerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_.MergeFrom(from.device_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarkerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerMessage::CopyFrom(const MarkerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MarkerMessage::Swap(MarkerMessage* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(id_, other->id_);
    device_.Swap(&other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarkerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkerMessage_descriptor_;
  metadata.reflection = MarkerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceSignalStateMessage::kTypeFieldNumber;
const int DeviceSignalStateMessage::kSignalFieldNumber;
const int DeviceSignalStateMessage::kValueFieldNumber;
const int DeviceSignalStateMessage::kCountFieldNumber;
#endif  // !_MSC_VER

DeviceSignalStateMessage::DeviceSignalStateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.sc.DeviceSignalStateMessage)
}

void DeviceSignalStateMessage::InitAsDefaultInstance() {
}

DeviceSignalStateMessage::DeviceSignalStateMessage(const DeviceSignalStateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.sc.DeviceSignalStateMessage)
}

void DeviceSignalStateMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceSignalStateMessage::~DeviceSignalStateMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.sc.DeviceSignalStateMessage)
  SharedDtor();
}

void DeviceSignalStateMessage::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (signal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signal_;
  }
  if (this != default_instance_) {
  }
}

void DeviceSignalStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceSignalStateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceSignalStateMessage_descriptor_;
}

const DeviceSignalStateMessage& DeviceSignalStateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateCollection_2eproto();
  return *default_instance_;
}

DeviceSignalStateMessage* DeviceSignalStateMessage::default_instance_ = NULL;

DeviceSignalStateMessage* DeviceSignalStateMessage::New() const {
  return new DeviceSignalStateMessage;
}

void DeviceSignalStateMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeviceSignalStateMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(value_, count_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_signal()) {
      if (signal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signal_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceSignalStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.sc.DeviceSignalStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signal;
        break;
      }

      // required string signal = 2;
      case 2: {
        if (tag == 18) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signal().data(), this->signal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }

      // required float value = 3;
      case 3: {
        if (tag == 29) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.sc.DeviceSignalStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.sc.DeviceSignalStateMessage)
  return false;
#undef DO_
}

void DeviceSignalStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.sc.DeviceSignalStateMessage)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required string signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signal(), output);
  }

  // required float value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.sc.DeviceSignalStateMessage)
}

::google::protobuf::uint8* DeviceSignalStateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.sc.DeviceSignalStateMessage)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required string signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signal(), target);
  }

  // required float value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.sc.DeviceSignalStateMessage)
  return target;
}

int DeviceSignalStateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string signal = 2;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal());
    }

    // required float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSignalStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceSignalStateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceSignalStateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceSignalStateMessage::MergeFrom(const DeviceSignalStateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_signal()) {
      set_signal(from.signal());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceSignalStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSignalStateMessage::CopyFrom(const DeviceSignalStateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSignalStateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DeviceSignalStateMessage::Swap(DeviceSignalStateMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(signal_, other->signal_);
    std::swap(value_, other->value_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceSignalStateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceSignalStateMessage_descriptor_;
  metadata.reflection = DeviceSignalStateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateMessage::kSourceFieldNumber;
const int StateMessage::kMarkerUuidFieldNumber;
const int StateMessage::kMarkerIntFieldNumber;
const int StateMessage::kDeviceSignalStateMessageFieldNumber;
#endif  // !_MSC_VER

StateMessage::StateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.sc.StateMessage)
}

void StateMessage::InitAsDefaultInstance() {
}

StateMessage::StateMessage(const StateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.sc.StateMessage)
}

void StateMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marker_int_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMessage::~StateMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.sc.StateMessage)
  SharedDtor();
}

void StateMessage::SharedDtor() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (marker_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete marker_uuid_;
  }
  if (this != default_instance_) {
  }
}

void StateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMessage_descriptor_;
}

const StateMessage& StateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateCollection_2eproto();
  return *default_instance_;
}

StateMessage* StateMessage::default_instance_ = NULL;

StateMessage* StateMessage::New() const {
  return new StateMessage;
}

void StateMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_marker_uuid()) {
      if (marker_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        marker_uuid_->clear();
      }
    }
    marker_int_ = 0;
  }
  device_signal_state_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.sc.StateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_marker_uuid;
        break;
      }

      // required string marker_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_marker_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_marker_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->marker_uuid().data(), this->marker_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "marker_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_marker_int;
        break;
      }

      // required int32 marker_int = 3;
      case 3: {
        if (tag == 24) {
         parse_marker_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marker_int_)));
          set_has_marker_int();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_signal_state_message;
        break;
      }

      // repeated .freedm.broker.sc.DeviceSignalStateMessage device_signal_state_message = 4;
      case 4: {
        if (tag == 34) {
         parse_device_signal_state_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_signal_state_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_signal_state_message;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.sc.StateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.sc.StateMessage)
  return false;
#undef DO_
}

void StateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.sc.StateMessage)
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // required string marker_uuid = 2;
  if (has_marker_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->marker_uuid().data(), this->marker_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "marker_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->marker_uuid(), output);
  }

  // required int32 marker_int = 3;
  if (has_marker_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->marker_int(), output);
  }

  // repeated .freedm.broker.sc.DeviceSignalStateMessage device_signal_state_message = 4;
  for (int i = 0; i < this->device_signal_state_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->device_signal_state_message(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.sc.StateMessage)
}

::google::protobuf::uint8* StateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.sc.StateMessage)
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // required string marker_uuid = 2;
  if (has_marker_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->marker_uuid().data(), this->marker_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "marker_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->marker_uuid(), target);
  }

  // required int32 marker_int = 3;
  if (has_marker_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->marker_int(), target);
  }

  // repeated .freedm.broker.sc.DeviceSignalStateMessage device_signal_state_message = 4;
  for (int i = 0; i < this->device_signal_state_message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->device_signal_state_message(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.sc.StateMessage)
  return target;
}

int StateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // required string marker_uuid = 2;
    if (has_marker_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->marker_uuid());
    }

    // required int32 marker_int = 3;
    if (has_marker_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marker_int());
    }

  }
  // repeated .freedm.broker.sc.DeviceSignalStateMessage device_signal_state_message = 4;
  total_size += 1 * this->device_signal_state_message_size();
  for (int i = 0; i < this->device_signal_state_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_signal_state_message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMessage::MergeFrom(const StateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_signal_state_message_.MergeFrom(from.device_signal_state_message_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_marker_uuid()) {
      set_marker_uuid(from.marker_uuid());
    }
    if (from.has_marker_int()) {
      set_marker_int(from.marker_int());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMessage::CopyFrom(const StateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->device_signal_state_message())) return false;
  return true;
}

void StateMessage::Swap(StateMessage* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(marker_uuid_, other->marker_uuid_);
    std::swap(marker_int_, other->marker_int_);
    device_signal_state_message_.Swap(&other->device_signal_state_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMessage_descriptor_;
  metadata.reflection = StateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceSignalRequestMessage::kTypeFieldNumber;
const int DeviceSignalRequestMessage::kSignalFieldNumber;
#endif  // !_MSC_VER

DeviceSignalRequestMessage::DeviceSignalRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.sc.DeviceSignalRequestMessage)
}

void DeviceSignalRequestMessage::InitAsDefaultInstance() {
}

DeviceSignalRequestMessage::DeviceSignalRequestMessage(const DeviceSignalRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.sc.DeviceSignalRequestMessage)
}

void DeviceSignalRequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signal_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceSignalRequestMessage::~DeviceSignalRequestMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.sc.DeviceSignalRequestMessage)
  SharedDtor();
}

void DeviceSignalRequestMessage::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (signal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signal_;
  }
  if (this != default_instance_) {
  }
}

void DeviceSignalRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceSignalRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceSignalRequestMessage_descriptor_;
}

const DeviceSignalRequestMessage& DeviceSignalRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateCollection_2eproto();
  return *default_instance_;
}

DeviceSignalRequestMessage* DeviceSignalRequestMessage::default_instance_ = NULL;

DeviceSignalRequestMessage* DeviceSignalRequestMessage::New() const {
  return new DeviceSignalRequestMessage;
}

void DeviceSignalRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_signal()) {
      if (signal_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceSignalRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.sc.DeviceSignalRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signal;
        break;
      }

      // required string signal = 2;
      case 2: {
        if (tag == 18) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signal().data(), this->signal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.sc.DeviceSignalRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.sc.DeviceSignalRequestMessage)
  return false;
#undef DO_
}

void DeviceSignalRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.sc.DeviceSignalRequestMessage)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required string signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.sc.DeviceSignalRequestMessage)
}

::google::protobuf::uint8* DeviceSignalRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.sc.DeviceSignalRequestMessage)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required string signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal().data(), this->signal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.sc.DeviceSignalRequestMessage)
  return target;
}

int DeviceSignalRequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string signal = 2;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceSignalRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceSignalRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceSignalRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceSignalRequestMessage::MergeFrom(const DeviceSignalRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_signal()) {
      set_signal(from.signal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceSignalRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceSignalRequestMessage::CopyFrom(const DeviceSignalRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceSignalRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeviceSignalRequestMessage::Swap(DeviceSignalRequestMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(signal_, other->signal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceSignalRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceSignalRequestMessage_descriptor_;
  metadata.reflection = DeviceSignalRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestMessage::kModuleFieldNumber;
const int RequestMessage::kDeviceSignalRequestMessageFieldNumber;
#endif  // !_MSC_VER

RequestMessage::RequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.sc.RequestMessage)
}

void RequestMessage::InitAsDefaultInstance() {
}

RequestMessage::RequestMessage(const RequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.sc.RequestMessage)
}

void RequestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.sc.RequestMessage)
  SharedDtor();
}

void RequestMessage::SharedDtor() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (this != default_instance_) {
  }
}

void RequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMessage_descriptor_;
}

const RequestMessage& RequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateCollection_2eproto();
  return *default_instance_;
}

RequestMessage* RequestMessage::default_instance_ = NULL;

RequestMessage* RequestMessage::New() const {
  return new RequestMessage;
}

void RequestMessage::Clear() {
  if (has_module()) {
    if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      module_->clear();
    }
  }
  device_signal_request_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.sc.RequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "module");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_signal_request_message;
        break;
      }

      // repeated .freedm.broker.sc.DeviceSignalRequestMessage device_signal_request_message = 2;
      case 2: {
        if (tag == 18) {
         parse_device_signal_request_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_signal_request_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device_signal_request_message;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.sc.RequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.sc.RequestMessage)
  return false;
#undef DO_
}

void RequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.sc.RequestMessage)
  // required string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // repeated .freedm.broker.sc.DeviceSignalRequestMessage device_signal_request_message = 2;
  for (int i = 0; i < this->device_signal_request_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->device_signal_request_message(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.sc.RequestMessage)
}

::google::protobuf::uint8* RequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.sc.RequestMessage)
  // required string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // repeated .freedm.broker.sc.DeviceSignalRequestMessage device_signal_request_message = 2;
  for (int i = 0; i < this->device_signal_request_message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->device_signal_request_message(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.sc.RequestMessage)
  return target;
}

int RequestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

  }
  // repeated .freedm.broker.sc.DeviceSignalRequestMessage device_signal_request_message = 2;
  total_size += 1 * this->device_signal_request_message_size();
  for (int i = 0; i < this->device_signal_request_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_signal_request_message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMessage::MergeFrom(const RequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  device_signal_request_message_.MergeFrom(from.device_signal_request_message_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_module(from.module());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->device_signal_request_message())) return false;
  return true;
}

void RequestMessage::Swap(RequestMessage* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    device_signal_request_message_.Swap(&other->device_signal_request_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMessage_descriptor_;
  metadata.reflection = RequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectedStateMessage::kGatewayFieldNumber;
const int CollectedStateMessage::kGenerationFieldNumber;
const int CollectedStateMessage::kStorageFieldNumber;
const int CollectedStateMessage::kDrainFieldNumber;
const int CollectedStateMessage::kStateFieldNumber;
const int CollectedStateMessage::kNumIntransitAcceptsFieldNumber;
#endif  // !_MSC_VER

CollectedStateMessage::CollectedStateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.sc.CollectedStateMessage)
}

void CollectedStateMessage::InitAsDefaultInstance() {
}

CollectedStateMessage::CollectedStateMessage(const CollectedStateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.sc.CollectedStateMessage)
}

void CollectedStateMessage::SharedCtor() {
  _cached_size_ = 0;
  num_intransit_accepts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectedStateMessage::~CollectedStateMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.sc.CollectedStateMessage)
  SharedDtor();
}

void CollectedStateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectedStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectedStateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectedStateMessage_descriptor_;
}

const CollectedStateMessage& CollectedStateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateCollection_2eproto();
  return *default_instance_;
}

CollectedStateMessage* CollectedStateMessage::default_instance_ = NULL;

CollectedStateMessage* CollectedStateMessage::New() const {
  return new CollectedStateMessage;
}

void CollectedStateMessage::Clear() {
  num_intransit_accepts_ = 0;
  gateway_.Clear();
  generation_.Clear();
  storage_.Clear();
  drain_.Clear();
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectedStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.sc.CollectedStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double gateway = 1;
      case 1: {
        if (tag == 9) {
         parse_gateway:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_gateway())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_gateway())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_gateway;
        if (input->ExpectTag(17)) goto parse_generation;
        break;
      }

      // repeated double generation = 2;
      case 2: {
        if (tag == 17) {
         parse_generation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_generation())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_generation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_generation;
        if (input->ExpectTag(25)) goto parse_storage;
        break;
      }

      // repeated double storage = 3;
      case 3: {
        if (tag == 25) {
         parse_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_storage())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_storage())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_storage;
        if (input->ExpectTag(33)) goto parse_drain;
        break;
      }

      // repeated double drain = 4;
      case 4: {
        if (tag == 33) {
         parse_drain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_drain())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_drain())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_drain;
        if (input->ExpectTag(41)) goto parse_state;
        break;
      }

      // repeated double state = 5;
      case 5: {
        if (tag == 41) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_state())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_state())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_state;
        if (input->ExpectTag(48)) goto parse_num_intransit_accepts;
        break;
      }

      // required int32 num_intransit_accepts = 6;
      case 6: {
        if (tag == 48) {
         parse_num_intransit_accepts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_intransit_accepts_)));
          set_has_num_intransit_accepts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.sc.CollectedStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.sc.CollectedStateMessage)
  return false;
#undef DO_
}

void CollectedStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.sc.CollectedStateMessage)
  // repeated double gateway = 1;
  for (int i = 0; i < this->gateway_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->gateway(i), output);
  }

  // repeated double generation = 2;
  for (int i = 0; i < this->generation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->generation(i), output);
  }

  // repeated double storage = 3;
  for (int i = 0; i < this->storage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->storage(i), output);
  }

  // repeated double drain = 4;
  for (int i = 0; i < this->drain_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->drain(i), output);
  }

  // repeated double state = 5;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->state(i), output);
  }

  // required int32 num_intransit_accepts = 6;
  if (has_num_intransit_accepts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_intransit_accepts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.sc.CollectedStateMessage)
}

::google::protobuf::uint8* CollectedStateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.sc.CollectedStateMessage)
  // repeated double gateway = 1;
  for (int i = 0; i < this->gateway_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->gateway(i), target);
  }

  // repeated double generation = 2;
  for (int i = 0; i < this->generation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->generation(i), target);
  }

  // repeated double storage = 3;
  for (int i = 0; i < this->storage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->storage(i), target);
  }

  // repeated double drain = 4;
  for (int i = 0; i < this->drain_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->drain(i), target);
  }

  // repeated double state = 5;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->state(i), target);
  }

  // required int32 num_intransit_accepts = 6;
  if (has_num_intransit_accepts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_intransit_accepts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.sc.CollectedStateMessage)
  return target;
}

int CollectedStateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // required int32 num_intransit_accepts = 6;
    if (has_num_intransit_accepts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_intransit_accepts());
    }

  }
  // repeated double gateway = 1;
  {
    int data_size = 0;
    data_size = 8 * this->gateway_size();
    total_size += 1 * this->gateway_size() + data_size;
  }

  // repeated double generation = 2;
  {
    int data_size = 0;
    data_size = 8 * this->generation_size();
    total_size += 1 * this->generation_size() + data_size;
  }

  // repeated double storage = 3;
  {
    int data_size = 0;
    data_size = 8 * this->storage_size();
    total_size += 1 * this->storage_size() + data_size;
  }

  // repeated double drain = 4;
  {
    int data_size = 0;
    data_size = 8 * this->drain_size();
    total_size += 1 * this->drain_size() + data_size;
  }

  // repeated double state = 5;
  {
    int data_size = 0;
    data_size = 8 * this->state_size();
    total_size += 1 * this->state_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectedStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectedStateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectedStateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectedStateMessage::MergeFrom(const CollectedStateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  gateway_.MergeFrom(from.gateway_);
  generation_.MergeFrom(from.generation_);
  storage_.MergeFrom(from.storage_);
  drain_.MergeFrom(from.drain_);
  state_.MergeFrom(from.state_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_num_intransit_accepts()) {
      set_num_intransit_accepts(from.num_intransit_accepts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectedStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectedStateMessage::CopyFrom(const CollectedStateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectedStateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void CollectedStateMessage::Swap(CollectedStateMessage* other) {
  if (other != this) {
    gateway_.Swap(&other->gateway_);
    generation_.Swap(&other->generation_);
    storage_.Swap(&other->storage_);
    drain_.Swap(&other->drain_);
    state_.Swap(&other->state_);
    std::swap(num_intransit_accepts_, other->num_intransit_accepts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectedStateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectedStateMessage_descriptor_;
  metadata.reflection = CollectedStateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateCollectionMessage::kMarkerMessageFieldNumber;
const int StateCollectionMessage::kStateMessageFieldNumber;
const int StateCollectionMessage::kRequestMessageFieldNumber;
const int StateCollectionMessage::kCollectedStateMessageFieldNumber;
#endif  // !_MSC_VER

StateCollectionMessage::StateCollectionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.sc.StateCollectionMessage)
}

void StateCollectionMessage::InitAsDefaultInstance() {
  marker_message_ = const_cast< ::freedm::broker::sc::MarkerMessage*>(&::freedm::broker::sc::MarkerMessage::default_instance());
  state_message_ = const_cast< ::freedm::broker::sc::StateMessage*>(&::freedm::broker::sc::StateMessage::default_instance());
  request_message_ = const_cast< ::freedm::broker::sc::RequestMessage*>(&::freedm::broker::sc::RequestMessage::default_instance());
  collected_state_message_ = const_cast< ::freedm::broker::sc::CollectedStateMessage*>(&::freedm::broker::sc::CollectedStateMessage::default_instance());
}

StateCollectionMessage::StateCollectionMessage(const StateCollectionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.sc.StateCollectionMessage)
}

void StateCollectionMessage::SharedCtor() {
  _cached_size_ = 0;
  marker_message_ = NULL;
  state_message_ = NULL;
  request_message_ = NULL;
  collected_state_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateCollectionMessage::~StateCollectionMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.sc.StateCollectionMessage)
  SharedDtor();
}

void StateCollectionMessage::SharedDtor() {
  if (this != default_instance_) {
    delete marker_message_;
    delete state_message_;
    delete request_message_;
    delete collected_state_message_;
  }
}

void StateCollectionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateCollectionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateCollectionMessage_descriptor_;
}

const StateCollectionMessage& StateCollectionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateCollection_2eproto();
  return *default_instance_;
}

StateCollectionMessage* StateCollectionMessage::default_instance_ = NULL;

StateCollectionMessage* StateCollectionMessage::New() const {
  return new StateCollectionMessage;
}

void StateCollectionMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_marker_message()) {
      if (marker_message_ != NULL) marker_message_->::freedm::broker::sc::MarkerMessage::Clear();
    }
    if (has_state_message()) {
      if (state_message_ != NULL) state_message_->::freedm::broker::sc::StateMessage::Clear();
    }
    if (has_request_message()) {
      if (request_message_ != NULL) request_message_->::freedm::broker::sc::RequestMessage::Clear();
    }
    if (has_collected_state_message()) {
      if (collected_state_message_ != NULL) collected_state_message_->::freedm::broker::sc::CollectedStateMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateCollectionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.sc.StateCollectionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .freedm.broker.sc.MarkerMessage marker_message = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_state_message;
        break;
      }

      // optional .freedm.broker.sc.StateMessage state_message = 3;
      case 3: {
        if (tag == 26) {
         parse_state_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_request_message;
        break;
      }

      // optional .freedm.broker.sc.RequestMessage request_message = 4;
      case 4: {
        if (tag == 34) {
         parse_request_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_collected_state_message;
        break;
      }

      // optional .freedm.broker.sc.CollectedStateMessage collected_state_message = 5;
      case 5: {
        if (tag == 42) {
         parse_collected_state_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collected_state_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.sc.StateCollectionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.sc.StateCollectionMessage)
  return false;
#undef DO_
}

void StateCollectionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.sc.StateCollectionMessage)
  // optional .freedm.broker.sc.MarkerMessage marker_message = 2;
  if (has_marker_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->marker_message(), output);
  }

  // optional .freedm.broker.sc.StateMessage state_message = 3;
  if (has_state_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->state_message(), output);
  }

  // optional .freedm.broker.sc.RequestMessage request_message = 4;
  if (has_request_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->request_message(), output);
  }

  // optional .freedm.broker.sc.CollectedStateMessage collected_state_message = 5;
  if (has_collected_state_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->collected_state_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.sc.StateCollectionMessage)
}

::google::protobuf::uint8* StateCollectionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.sc.StateCollectionMessage)
  // optional .freedm.broker.sc.MarkerMessage marker_message = 2;
  if (has_marker_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->marker_message(), target);
  }

  // optional .freedm.broker.sc.StateMessage state_message = 3;
  if (has_state_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->state_message(), target);
  }

  // optional .freedm.broker.sc.RequestMessage request_message = 4;
  if (has_request_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->request_message(), target);
  }

  // optional .freedm.broker.sc.CollectedStateMessage collected_state_message = 5;
  if (has_collected_state_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->collected_state_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.sc.StateCollectionMessage)
  return target;
}

int StateCollectionMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .freedm.broker.sc.MarkerMessage marker_message = 2;
    if (has_marker_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marker_message());
    }

    // optional .freedm.broker.sc.StateMessage state_message = 3;
    if (has_state_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state_message());
    }

    // optional .freedm.broker.sc.RequestMessage request_message = 4;
    if (has_request_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_message());
    }

    // optional .freedm.broker.sc.CollectedStateMessage collected_state_message = 5;
    if (has_collected_state_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collected_state_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateCollectionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateCollectionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateCollectionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateCollectionMessage::MergeFrom(const StateCollectionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marker_message()) {
      mutable_marker_message()->::freedm::broker::sc::MarkerMessage::MergeFrom(from.marker_message());
    }
    if (from.has_state_message()) {
      mutable_state_message()->::freedm::broker::sc::StateMessage::MergeFrom(from.state_message());
    }
    if (from.has_request_message()) {
      mutable_request_message()->::freedm::broker::sc::RequestMessage::MergeFrom(from.request_message());
    }
    if (from.has_collected_state_message()) {
      mutable_collected_state_message()->::freedm::broker::sc::CollectedStateMessage::MergeFrom(from.collected_state_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateCollectionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateCollectionMessage::CopyFrom(const StateCollectionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateCollectionMessage::IsInitialized() const {

  if (has_marker_message()) {
    if (!this->marker_message().IsInitialized()) return false;
  }
  if (has_state_message()) {
    if (!this->state_message().IsInitialized()) return false;
  }
  if (has_request_message()) {
    if (!this->request_message().IsInitialized()) return false;
  }
  if (has_collected_state_message()) {
    if (!this->collected_state_message().IsInitialized()) return false;
  }
  return true;
}

void StateCollectionMessage::Swap(StateCollectionMessage* other) {
  if (other != this) {
    std::swap(marker_message_, other->marker_message_);
    std::swap(state_message_, other->state_message_);
    std::swap(request_message_, other->request_message_);
    std::swap(collected_state_message_, other->collected_state_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateCollectionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateCollectionMessage_descriptor_;
  metadata.reflection = StateCollectionMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sc
}  // namespace broker
}  // namespace freedm

// @@protoc_insertion_point(global_scope)
