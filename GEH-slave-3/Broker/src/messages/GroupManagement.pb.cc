// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupManagement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GroupManagement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace freedm {
namespace broker {
namespace gm {

namespace {

const ::google::protobuf::Descriptor* FidStateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FidStateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AreYouCoordinatorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreYouCoordinatorMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AreYouCoordinatorResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreYouCoordinatorResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AreYouThereResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreYouThereResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AreYouThereMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreYouThereMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerListQueryMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerListQueryMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectedPeerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectedPeerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerListMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerListMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupManagementMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupManagementMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GroupManagement_2eproto() {
  protobuf_AddDesc_GroupManagement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GroupManagement.proto");
  GOOGLE_CHECK(file != NULL);
  FidStateMessage_descriptor_ = file->message_type(0);
  static const int FidStateMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FidStateMessage, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FidStateMessage, state_),
  };
  FidStateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FidStateMessage_descriptor_,
      FidStateMessage::default_instance_,
      FidStateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FidStateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FidStateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FidStateMessage));
  AreYouCoordinatorMessage_descriptor_ = file->message_type(1);
  static const int AreYouCoordinatorMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorMessage, sequence_no_),
  };
  AreYouCoordinatorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreYouCoordinatorMessage_descriptor_,
      AreYouCoordinatorMessage::default_instance_,
      AreYouCoordinatorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreYouCoordinatorMessage));
  InviteMessage_descriptor_ = file->message_type(2);
  static const int InviteMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMessage, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMessage, group_leader_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMessage, group_leader_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMessage, group_leader_port_),
  };
  InviteMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteMessage_descriptor_,
      InviteMessage::default_instance_,
      InviteMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteMessage));
  AreYouCoordinatorResponseMessage_descriptor_ = file->message_type(3);
  static const int AreYouCoordinatorResponseMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorResponseMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorResponseMessage, leader_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorResponseMessage, leader_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorResponseMessage, leader_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorResponseMessage, sequence_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorResponseMessage, fid_state_),
  };
  AreYouCoordinatorResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreYouCoordinatorResponseMessage_descriptor_,
      AreYouCoordinatorResponseMessage::default_instance_,
      AreYouCoordinatorResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouCoordinatorResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreYouCoordinatorResponseMessage));
  AreYouThereResponseMessage_descriptor_ = file->message_type(4);
  static const int AreYouThereResponseMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereResponseMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereResponseMessage, leader_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereResponseMessage, leader_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereResponseMessage, leader_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereResponseMessage, sequence_no_),
  };
  AreYouThereResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreYouThereResponseMessage_descriptor_,
      AreYouThereResponseMessage::default_instance_,
      AreYouThereResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreYouThereResponseMessage));
  AcceptMessage_descriptor_ = file->message_type(5);
  static const int AcceptMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMessage, group_id_),
  };
  AcceptMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptMessage_descriptor_,
      AcceptMessage::default_instance_,
      AcceptMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptMessage));
  AreYouThereMessage_descriptor_ = file->message_type(6);
  static const int AreYouThereMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereMessage, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereMessage, sequence_no_),
  };
  AreYouThereMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreYouThereMessage_descriptor_,
      AreYouThereMessage::default_instance_,
      AreYouThereMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreYouThereMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreYouThereMessage));
  PeerListQueryMessage_descriptor_ = file->message_type(7);
  static const int PeerListQueryMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerListQueryMessage, requester_),
  };
  PeerListQueryMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerListQueryMessage_descriptor_,
      PeerListQueryMessage::default_instance_,
      PeerListQueryMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerListQueryMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerListQueryMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerListQueryMessage));
  ConnectedPeerMessage_descriptor_ = file->message_type(8);
  static const int ConnectedPeerMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedPeerMessage, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedPeerMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedPeerMessage, port_),
  };
  ConnectedPeerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectedPeerMessage_descriptor_,
      ConnectedPeerMessage::default_instance_,
      ConnectedPeerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedPeerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectedPeerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectedPeerMessage));
  PeerListMessage_descriptor_ = file->message_type(9);
  static const int PeerListMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerListMessage, connected_peer_message_),
  };
  PeerListMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeerListMessage_descriptor_,
      PeerListMessage::default_instance_,
      PeerListMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerListMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerListMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeerListMessage));
  GroupManagementMessage_descriptor_ = file->message_type(10);
  static const int GroupManagementMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, are_you_coordinator_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, invite_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, are_you_coordinator_response_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, are_you_there_response_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, accept_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, are_you_there_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, peer_list_query_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, peer_list_message_),
  };
  GroupManagementMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupManagementMessage_descriptor_,
      GroupManagementMessage::default_instance_,
      GroupManagementMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupManagementMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupManagementMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GroupManagement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FidStateMessage_descriptor_, &FidStateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreYouCoordinatorMessage_descriptor_, &AreYouCoordinatorMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteMessage_descriptor_, &InviteMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreYouCoordinatorResponseMessage_descriptor_, &AreYouCoordinatorResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreYouThereResponseMessage_descriptor_, &AreYouThereResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptMessage_descriptor_, &AcceptMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreYouThereMessage_descriptor_, &AreYouThereMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerListQueryMessage_descriptor_, &PeerListQueryMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectedPeerMessage_descriptor_, &ConnectedPeerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeerListMessage_descriptor_, &PeerListMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupManagementMessage_descriptor_, &GroupManagementMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GroupManagement_2eproto() {
  delete FidStateMessage::default_instance_;
  delete FidStateMessage_reflection_;
  delete AreYouCoordinatorMessage::default_instance_;
  delete AreYouCoordinatorMessage_reflection_;
  delete InviteMessage::default_instance_;
  delete InviteMessage_reflection_;
  delete AreYouCoordinatorResponseMessage::default_instance_;
  delete AreYouCoordinatorResponseMessage_reflection_;
  delete AreYouThereResponseMessage::default_instance_;
  delete AreYouThereResponseMessage_reflection_;
  delete AcceptMessage::default_instance_;
  delete AcceptMessage_reflection_;
  delete AreYouThereMessage::default_instance_;
  delete AreYouThereMessage_reflection_;
  delete PeerListQueryMessage::default_instance_;
  delete PeerListQueryMessage_reflection_;
  delete ConnectedPeerMessage::default_instance_;
  delete ConnectedPeerMessage_reflection_;
  delete PeerListMessage::default_instance_;
  delete PeerListMessage_reflection_;
  delete GroupManagementMessage::default_instance_;
  delete GroupManagementMessage_reflection_;
}

void protobuf_AddDesc_GroupManagement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025GroupManagement.proto\022\020freedm.broker.g"
    "m\"2\n\017FidStateMessage\022\020\n\010deviceid\030\001 \002(\t\022\r"
    "\n\005state\030\002 \002(\010\"/\n\030AreYouCoordinatorMessag"
    "e\022\023\n\013sequence_no\030\001 \002(\r\"r\n\rInviteMessage\022"
    "\020\n\010group_id\030\001 \002(\r\022\031\n\021group_leader_uuid\030\002"
    " \002(\t\022\031\n\021group_leader_host\030\003 \002(\t\022\031\n\021group"
    "_leader_port\030\004 \002(\t\"\275\001\n AreYouCoordinator"
    "ResponseMessage\022\017\n\007payload\030\001 \002(\t\022\023\n\013lead"
    "er_uuid\030\002 \002(\t\022\023\n\013leader_host\030\003 \002(\t\022\023\n\013le"
    "ader_port\030\004 \002(\t\022\023\n\013sequence_no\030\005 \002(\r\0224\n\t"
    "fid_state\030\006 \003(\0132!.freedm.broker.gm.FidSt"
    "ateMessage\"\201\001\n\032AreYouThereResponseMessag"
    "e\022\017\n\007payload\030\001 \002(\t\022\023\n\013leader_uuid\030\002 \002(\t\022"
    "\023\n\013leader_host\030\003 \002(\t\022\023\n\013leader_port\030\004 \002("
    "\t\022\023\n\013sequence_no\030\005 \002(\r\"!\n\rAcceptMessage\022"
    "\020\n\010group_id\030\001 \002(\r\";\n\022AreYouThereMessage\022"
    "\020\n\010group_id\030\001 \002(\r\022\023\n\013sequence_no\030\002 \002(\r\")"
    "\n\024PeerListQueryMessage\022\021\n\trequester\030\001 \002("
    "\t\"@\n\024ConnectedPeerMessage\022\014\n\004uuid\030\001 \002(\t\022"
    "\014\n\004host\030\002 \002(\t\022\014\n\004port\030\003 \002(\t\"Y\n\017PeerListM"
    "essage\022F\n\026connected_peer_message\030\001 \003(\0132&"
    ".freedm.broker.gm.ConnectedPeerMessage\"\337"
    "\004\n\026GroupManagementMessage\022O\n\033are_you_coo"
    "rdinator_message\030\001 \001(\0132*.freedm.broker.g"
    "m.AreYouCoordinatorMessage\0227\n\016invite_mes"
    "sage\030\002 \001(\0132\037.freedm.broker.gm.InviteMess"
    "age\022`\n$are_you_coordinator_response_mess"
    "age\030\003 \001(\01322.freedm.broker.gm.AreYouCoord"
    "inatorResponseMessage\022T\n\036are_you_there_r"
    "esponse_message\030\004 \001(\0132,.freedm.broker.gm"
    ".AreYouThereResponseMessage\0227\n\016accept_me"
    "ssage\030\005 \001(\0132\037.freedm.broker.gm.AcceptMes"
    "sage\022C\n\025are_you_there_message\030\006 \001(\0132$.fr"
    "eedm.broker.gm.AreYouThereMessage\022G\n\027pee"
    "r_list_query_message\030\007 \001(\0132&.freedm.brok"
    "er.gm.PeerListQueryMessage\022<\n\021peer_list_"
    "message\030\010 \001(\0132!.freedm.broker.gm.PeerLis"
    "tMessage", 1488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GroupManagement.proto", &protobuf_RegisterTypes);
  FidStateMessage::default_instance_ = new FidStateMessage();
  AreYouCoordinatorMessage::default_instance_ = new AreYouCoordinatorMessage();
  InviteMessage::default_instance_ = new InviteMessage();
  AreYouCoordinatorResponseMessage::default_instance_ = new AreYouCoordinatorResponseMessage();
  AreYouThereResponseMessage::default_instance_ = new AreYouThereResponseMessage();
  AcceptMessage::default_instance_ = new AcceptMessage();
  AreYouThereMessage::default_instance_ = new AreYouThereMessage();
  PeerListQueryMessage::default_instance_ = new PeerListQueryMessage();
  ConnectedPeerMessage::default_instance_ = new ConnectedPeerMessage();
  PeerListMessage::default_instance_ = new PeerListMessage();
  GroupManagementMessage::default_instance_ = new GroupManagementMessage();
  FidStateMessage::default_instance_->InitAsDefaultInstance();
  AreYouCoordinatorMessage::default_instance_->InitAsDefaultInstance();
  InviteMessage::default_instance_->InitAsDefaultInstance();
  AreYouCoordinatorResponseMessage::default_instance_->InitAsDefaultInstance();
  AreYouThereResponseMessage::default_instance_->InitAsDefaultInstance();
  AcceptMessage::default_instance_->InitAsDefaultInstance();
  AreYouThereMessage::default_instance_->InitAsDefaultInstance();
  PeerListQueryMessage::default_instance_->InitAsDefaultInstance();
  ConnectedPeerMessage::default_instance_->InitAsDefaultInstance();
  PeerListMessage::default_instance_->InitAsDefaultInstance();
  GroupManagementMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GroupManagement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GroupManagement_2eproto {
  StaticDescriptorInitializer_GroupManagement_2eproto() {
    protobuf_AddDesc_GroupManagement_2eproto();
  }
} static_descriptor_initializer_GroupManagement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FidStateMessage::kDeviceidFieldNumber;
const int FidStateMessage::kStateFieldNumber;
#endif  // !_MSC_VER

FidStateMessage::FidStateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.FidStateMessage)
}

void FidStateMessage::InitAsDefaultInstance() {
}

FidStateMessage::FidStateMessage(const FidStateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.FidStateMessage)
}

void FidStateMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FidStateMessage::~FidStateMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.FidStateMessage)
  SharedDtor();
}

void FidStateMessage::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void FidStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FidStateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FidStateMessage_descriptor_;
}

const FidStateMessage& FidStateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

FidStateMessage* FidStateMessage::default_instance_ = NULL;

FidStateMessage* FidStateMessage::New() const {
  return new FidStateMessage;
}

void FidStateMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
    state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FidStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.FidStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string deviceid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required bool state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.FidStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.FidStateMessage)
  return false;
#undef DO_
}

void FidStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.FidStateMessage)
  // required string deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // required bool state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.FidStateMessage)
}

::google::protobuf::uint8* FidStateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.FidStateMessage)
  // required string deviceid = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceid(), target);
  }

  // required bool state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.FidStateMessage)
  return target;
}

int FidStateMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string deviceid = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required bool state = 2;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FidStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FidStateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FidStateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FidStateMessage::MergeFrom(const FidStateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FidStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FidStateMessage::CopyFrom(const FidStateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FidStateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FidStateMessage::Swap(FidStateMessage* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FidStateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FidStateMessage_descriptor_;
  metadata.reflection = FidStateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AreYouCoordinatorMessage::kSequenceNoFieldNumber;
#endif  // !_MSC_VER

AreYouCoordinatorMessage::AreYouCoordinatorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.AreYouCoordinatorMessage)
}

void AreYouCoordinatorMessage::InitAsDefaultInstance() {
}

AreYouCoordinatorMessage::AreYouCoordinatorMessage(const AreYouCoordinatorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.AreYouCoordinatorMessage)
}

void AreYouCoordinatorMessage::SharedCtor() {
  _cached_size_ = 0;
  sequence_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreYouCoordinatorMessage::~AreYouCoordinatorMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.AreYouCoordinatorMessage)
  SharedDtor();
}

void AreYouCoordinatorMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AreYouCoordinatorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreYouCoordinatorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreYouCoordinatorMessage_descriptor_;
}

const AreYouCoordinatorMessage& AreYouCoordinatorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

AreYouCoordinatorMessage* AreYouCoordinatorMessage::default_instance_ = NULL;

AreYouCoordinatorMessage* AreYouCoordinatorMessage::New() const {
  return new AreYouCoordinatorMessage;
}

void AreYouCoordinatorMessage::Clear() {
  sequence_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreYouCoordinatorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.AreYouCoordinatorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_no_)));
          set_has_sequence_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.AreYouCoordinatorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.AreYouCoordinatorMessage)
  return false;
#undef DO_
}

void AreYouCoordinatorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.AreYouCoordinatorMessage)
  // required uint32 sequence_no = 1;
  if (has_sequence_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.AreYouCoordinatorMessage)
}

::google::protobuf::uint8* AreYouCoordinatorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.AreYouCoordinatorMessage)
  // required uint32 sequence_no = 1;
  if (has_sequence_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.AreYouCoordinatorMessage)
  return target;
}

int AreYouCoordinatorMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence_no = 1;
    if (has_sequence_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreYouCoordinatorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreYouCoordinatorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreYouCoordinatorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreYouCoordinatorMessage::MergeFrom(const AreYouCoordinatorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_no()) {
      set_sequence_no(from.sequence_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreYouCoordinatorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreYouCoordinatorMessage::CopyFrom(const AreYouCoordinatorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreYouCoordinatorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AreYouCoordinatorMessage::Swap(AreYouCoordinatorMessage* other) {
  if (other != this) {
    std::swap(sequence_no_, other->sequence_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreYouCoordinatorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreYouCoordinatorMessage_descriptor_;
  metadata.reflection = AreYouCoordinatorMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteMessage::kGroupIdFieldNumber;
const int InviteMessage::kGroupLeaderUuidFieldNumber;
const int InviteMessage::kGroupLeaderHostFieldNumber;
const int InviteMessage::kGroupLeaderPortFieldNumber;
#endif  // !_MSC_VER

InviteMessage::InviteMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.InviteMessage)
}

void InviteMessage::InitAsDefaultInstance() {
}

InviteMessage::InviteMessage(const InviteMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.InviteMessage)
}

void InviteMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = 0u;
  group_leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteMessage::~InviteMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.InviteMessage)
  SharedDtor();
}

void InviteMessage::SharedDtor() {
  if (group_leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_leader_uuid_;
  }
  if (group_leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_leader_host_;
  }
  if (group_leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_leader_port_;
  }
  if (this != default_instance_) {
  }
}

void InviteMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteMessage_descriptor_;
}

const InviteMessage& InviteMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

InviteMessage* InviteMessage::default_instance_ = NULL;

InviteMessage* InviteMessage::New() const {
  return new InviteMessage;
}

void InviteMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    group_id_ = 0u;
    if (has_group_leader_uuid()) {
      if (group_leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_leader_uuid_->clear();
      }
    }
    if (has_group_leader_host()) {
      if (group_leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_leader_host_->clear();
      }
    }
    if (has_group_leader_port()) {
      if (group_leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_leader_port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.InviteMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_group_leader_uuid;
        break;
      }

      // required string group_leader_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_group_leader_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_leader_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_leader_uuid().data(), this->group_leader_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_leader_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_group_leader_host;
        break;
      }

      // required string group_leader_host = 3;
      case 3: {
        if (tag == 26) {
         parse_group_leader_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_leader_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_leader_host().data(), this->group_leader_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_leader_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_leader_port;
        break;
      }

      // required string group_leader_port = 4;
      case 4: {
        if (tag == 34) {
         parse_group_leader_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_leader_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_leader_port().data(), this->group_leader_port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_leader_port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.InviteMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.InviteMessage)
  return false;
#undef DO_
}

void InviteMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.InviteMessage)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required string group_leader_uuid = 2;
  if (has_group_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_leader_uuid().data(), this->group_leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_leader_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_leader_uuid(), output);
  }

  // required string group_leader_host = 3;
  if (has_group_leader_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_leader_host().data(), this->group_leader_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_leader_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_leader_host(), output);
  }

  // required string group_leader_port = 4;
  if (has_group_leader_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_leader_port().data(), this->group_leader_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_leader_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_leader_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.InviteMessage)
}

::google::protobuf::uint8* InviteMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.InviteMessage)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required string group_leader_uuid = 2;
  if (has_group_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_leader_uuid().data(), this->group_leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_leader_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_leader_uuid(), target);
  }

  // required string group_leader_host = 3;
  if (has_group_leader_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_leader_host().data(), this->group_leader_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_leader_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_leader_host(), target);
  }

  // required string group_leader_port = 4;
  if (has_group_leader_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_leader_port().data(), this->group_leader_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_leader_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_leader_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.InviteMessage)
  return target;
}

int InviteMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required string group_leader_uuid = 2;
    if (has_group_leader_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_leader_uuid());
    }

    // required string group_leader_host = 3;
    if (has_group_leader_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_leader_host());
    }

    // required string group_leader_port = 4;
    if (has_group_leader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_leader_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteMessage::MergeFrom(const InviteMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_leader_uuid()) {
      set_group_leader_uuid(from.group_leader_uuid());
    }
    if (from.has_group_leader_host()) {
      set_group_leader_host(from.group_leader_host());
    }
    if (from.has_group_leader_port()) {
      set_group_leader_port(from.group_leader_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteMessage::CopyFrom(const InviteMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void InviteMessage::Swap(InviteMessage* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(group_leader_uuid_, other->group_leader_uuid_);
    std::swap(group_leader_host_, other->group_leader_host_);
    std::swap(group_leader_port_, other->group_leader_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteMessage_descriptor_;
  metadata.reflection = InviteMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AreYouCoordinatorResponseMessage::kPayloadFieldNumber;
const int AreYouCoordinatorResponseMessage::kLeaderUuidFieldNumber;
const int AreYouCoordinatorResponseMessage::kLeaderHostFieldNumber;
const int AreYouCoordinatorResponseMessage::kLeaderPortFieldNumber;
const int AreYouCoordinatorResponseMessage::kSequenceNoFieldNumber;
const int AreYouCoordinatorResponseMessage::kFidStateFieldNumber;
#endif  // !_MSC_VER

AreYouCoordinatorResponseMessage::AreYouCoordinatorResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.AreYouCoordinatorResponseMessage)
}

void AreYouCoordinatorResponseMessage::InitAsDefaultInstance() {
}

AreYouCoordinatorResponseMessage::AreYouCoordinatorResponseMessage(const AreYouCoordinatorResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.AreYouCoordinatorResponseMessage)
}

void AreYouCoordinatorResponseMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreYouCoordinatorResponseMessage::~AreYouCoordinatorResponseMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.AreYouCoordinatorResponseMessage)
  SharedDtor();
}

void AreYouCoordinatorResponseMessage::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_uuid_;
  }
  if (leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_host_;
  }
  if (leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_port_;
  }
  if (this != default_instance_) {
  }
}

void AreYouCoordinatorResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreYouCoordinatorResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreYouCoordinatorResponseMessage_descriptor_;
}

const AreYouCoordinatorResponseMessage& AreYouCoordinatorResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

AreYouCoordinatorResponseMessage* AreYouCoordinatorResponseMessage::default_instance_ = NULL;

AreYouCoordinatorResponseMessage* AreYouCoordinatorResponseMessage::New() const {
  return new AreYouCoordinatorResponseMessage;
}

void AreYouCoordinatorResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_->clear();
      }
    }
    if (has_leader_uuid()) {
      if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_uuid_->clear();
      }
    }
    if (has_leader_host()) {
      if (leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_host_->clear();
      }
    }
    if (has_leader_port()) {
      if (leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_port_->clear();
      }
    }
    sequence_no_ = 0u;
  }
  fid_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreYouCoordinatorResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.AreYouCoordinatorResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string payload = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->payload().data(), this->payload().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "payload");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_uuid;
        break;
      }

      // required string leader_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_uuid().data(), this->leader_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leader_host;
        break;
      }

      // required string leader_host = 3;
      case 3: {
        if (tag == 26) {
         parse_leader_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_host().data(), this->leader_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_leader_port;
        break;
      }

      // required string leader_port = 4;
      case 4: {
        if (tag == 34) {
         parse_leader_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_port().data(), this->leader_port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sequence_no;
        break;
      }

      // required uint32 sequence_no = 5;
      case 5: {
        if (tag == 40) {
         parse_sequence_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_no_)));
          set_has_sequence_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fid_state;
        break;
      }

      // repeated .freedm.broker.gm.FidStateMessage fid_state = 6;
      case 6: {
        if (tag == 50) {
         parse_fid_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fid_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fid_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.AreYouCoordinatorResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.AreYouCoordinatorResponseMessage)
  return false;
#undef DO_
}

void AreYouCoordinatorResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.AreYouCoordinatorResponseMessage)
  // required string payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->payload(), output);
  }

  // required string leader_uuid = 2;
  if (has_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_uuid().data(), this->leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_uuid(), output);
  }

  // required string leader_host = 3;
  if (has_leader_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_host().data(), this->leader_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_host(), output);
  }

  // required string leader_port = 4;
  if (has_leader_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_port().data(), this->leader_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->leader_port(), output);
  }

  // required uint32 sequence_no = 5;
  if (has_sequence_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sequence_no(), output);
  }

  // repeated .freedm.broker.gm.FidStateMessage fid_state = 6;
  for (int i = 0; i < this->fid_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fid_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.AreYouCoordinatorResponseMessage)
}

::google::protobuf::uint8* AreYouCoordinatorResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.AreYouCoordinatorResponseMessage)
  // required string payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->payload(), target);
  }

  // required string leader_uuid = 2;
  if (has_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_uuid().data(), this->leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_uuid(), target);
  }

  // required string leader_host = 3;
  if (has_leader_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_host().data(), this->leader_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_host(), target);
  }

  // required string leader_port = 4;
  if (has_leader_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_port().data(), this->leader_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leader_port(), target);
  }

  // required uint32 sequence_no = 5;
  if (has_sequence_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sequence_no(), target);
  }

  // repeated .freedm.broker.gm.FidStateMessage fid_state = 6;
  for (int i = 0; i < this->fid_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fid_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.AreYouCoordinatorResponseMessage)
  return target;
}

int AreYouCoordinatorResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string payload = 1;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload());
    }

    // required string leader_uuid = 2;
    if (has_leader_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_uuid());
    }

    // required string leader_host = 3;
    if (has_leader_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_host());
    }

    // required string leader_port = 4;
    if (has_leader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_port());
    }

    // required uint32 sequence_no = 5;
    if (has_sequence_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_no());
    }

  }
  // repeated .freedm.broker.gm.FidStateMessage fid_state = 6;
  total_size += 1 * this->fid_state_size();
  for (int i = 0; i < this->fid_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fid_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreYouCoordinatorResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreYouCoordinatorResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreYouCoordinatorResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreYouCoordinatorResponseMessage::MergeFrom(const AreYouCoordinatorResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  fid_state_.MergeFrom(from.fid_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_leader_uuid()) {
      set_leader_uuid(from.leader_uuid());
    }
    if (from.has_leader_host()) {
      set_leader_host(from.leader_host());
    }
    if (from.has_leader_port()) {
      set_leader_port(from.leader_port());
    }
    if (from.has_sequence_no()) {
      set_sequence_no(from.sequence_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreYouCoordinatorResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreYouCoordinatorResponseMessage::CopyFrom(const AreYouCoordinatorResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreYouCoordinatorResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fid_state())) return false;
  return true;
}

void AreYouCoordinatorResponseMessage::Swap(AreYouCoordinatorResponseMessage* other) {
  if (other != this) {
    std::swap(payload_, other->payload_);
    std::swap(leader_uuid_, other->leader_uuid_);
    std::swap(leader_host_, other->leader_host_);
    std::swap(leader_port_, other->leader_port_);
    std::swap(sequence_no_, other->sequence_no_);
    fid_state_.Swap(&other->fid_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreYouCoordinatorResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreYouCoordinatorResponseMessage_descriptor_;
  metadata.reflection = AreYouCoordinatorResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AreYouThereResponseMessage::kPayloadFieldNumber;
const int AreYouThereResponseMessage::kLeaderUuidFieldNumber;
const int AreYouThereResponseMessage::kLeaderHostFieldNumber;
const int AreYouThereResponseMessage::kLeaderPortFieldNumber;
const int AreYouThereResponseMessage::kSequenceNoFieldNumber;
#endif  // !_MSC_VER

AreYouThereResponseMessage::AreYouThereResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.AreYouThereResponseMessage)
}

void AreYouThereResponseMessage::InitAsDefaultInstance() {
}

AreYouThereResponseMessage::AreYouThereResponseMessage(const AreYouThereResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.AreYouThereResponseMessage)
}

void AreYouThereResponseMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sequence_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreYouThereResponseMessage::~AreYouThereResponseMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.AreYouThereResponseMessage)
  SharedDtor();
}

void AreYouThereResponseMessage::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_uuid_;
  }
  if (leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_host_;
  }
  if (leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_port_;
  }
  if (this != default_instance_) {
  }
}

void AreYouThereResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreYouThereResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreYouThereResponseMessage_descriptor_;
}

const AreYouThereResponseMessage& AreYouThereResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

AreYouThereResponseMessage* AreYouThereResponseMessage::default_instance_ = NULL;

AreYouThereResponseMessage* AreYouThereResponseMessage::New() const {
  return new AreYouThereResponseMessage;
}

void AreYouThereResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_->clear();
      }
    }
    if (has_leader_uuid()) {
      if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_uuid_->clear();
      }
    }
    if (has_leader_host()) {
      if (leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_host_->clear();
      }
    }
    if (has_leader_port()) {
      if (leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leader_port_->clear();
      }
    }
    sequence_no_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreYouThereResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.AreYouThereResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string payload = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->payload().data(), this->payload().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "payload");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader_uuid;
        break;
      }

      // required string leader_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_leader_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_uuid().data(), this->leader_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leader_host;
        break;
      }

      // required string leader_host = 3;
      case 3: {
        if (tag == 26) {
         parse_leader_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_host().data(), this->leader_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_leader_port;
        break;
      }

      // required string leader_port = 4;
      case 4: {
        if (tag == 34) {
         parse_leader_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_port().data(), this->leader_port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leader_port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sequence_no;
        break;
      }

      // required uint32 sequence_no = 5;
      case 5: {
        if (tag == 40) {
         parse_sequence_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_no_)));
          set_has_sequence_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.AreYouThereResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.AreYouThereResponseMessage)
  return false;
#undef DO_
}

void AreYouThereResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.AreYouThereResponseMessage)
  // required string payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->payload(), output);
  }

  // required string leader_uuid = 2;
  if (has_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_uuid().data(), this->leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leader_uuid(), output);
  }

  // required string leader_host = 3;
  if (has_leader_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_host().data(), this->leader_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->leader_host(), output);
  }

  // required string leader_port = 4;
  if (has_leader_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_port().data(), this->leader_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->leader_port(), output);
  }

  // required uint32 sequence_no = 5;
  if (has_sequence_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sequence_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.AreYouThereResponseMessage)
}

::google::protobuf::uint8* AreYouThereResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.AreYouThereResponseMessage)
  // required string payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->payload(), target);
  }

  // required string leader_uuid = 2;
  if (has_leader_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_uuid().data(), this->leader_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leader_uuid(), target);
  }

  // required string leader_host = 3;
  if (has_leader_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_host().data(), this->leader_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leader_host(), target);
  }

  // required string leader_port = 4;
  if (has_leader_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_port().data(), this->leader_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leader_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leader_port(), target);
  }

  // required uint32 sequence_no = 5;
  if (has_sequence_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sequence_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.AreYouThereResponseMessage)
  return target;
}

int AreYouThereResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string payload = 1;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload());
    }

    // required string leader_uuid = 2;
    if (has_leader_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_uuid());
    }

    // required string leader_host = 3;
    if (has_leader_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_host());
    }

    // required string leader_port = 4;
    if (has_leader_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_port());
    }

    // required uint32 sequence_no = 5;
    if (has_sequence_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreYouThereResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreYouThereResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreYouThereResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreYouThereResponseMessage::MergeFrom(const AreYouThereResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_leader_uuid()) {
      set_leader_uuid(from.leader_uuid());
    }
    if (from.has_leader_host()) {
      set_leader_host(from.leader_host());
    }
    if (from.has_leader_port()) {
      set_leader_port(from.leader_port());
    }
    if (from.has_sequence_no()) {
      set_sequence_no(from.sequence_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreYouThereResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreYouThereResponseMessage::CopyFrom(const AreYouThereResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreYouThereResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AreYouThereResponseMessage::Swap(AreYouThereResponseMessage* other) {
  if (other != this) {
    std::swap(payload_, other->payload_);
    std::swap(leader_uuid_, other->leader_uuid_);
    std::swap(leader_host_, other->leader_host_);
    std::swap(leader_port_, other->leader_port_);
    std::swap(sequence_no_, other->sequence_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreYouThereResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreYouThereResponseMessage_descriptor_;
  metadata.reflection = AreYouThereResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptMessage::kGroupIdFieldNumber;
#endif  // !_MSC_VER

AcceptMessage::AcceptMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.AcceptMessage)
}

void AcceptMessage::InitAsDefaultInstance() {
}

AcceptMessage::AcceptMessage(const AcceptMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.AcceptMessage)
}

void AcceptMessage::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptMessage::~AcceptMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.AcceptMessage)
  SharedDtor();
}

void AcceptMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptMessage_descriptor_;
}

const AcceptMessage& AcceptMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

AcceptMessage* AcceptMessage::default_instance_ = NULL;

AcceptMessage* AcceptMessage::New() const {
  return new AcceptMessage;
}

void AcceptMessage::Clear() {
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.AcceptMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.AcceptMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.AcceptMessage)
  return false;
#undef DO_
}

void AcceptMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.AcceptMessage)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.AcceptMessage)
}

::google::protobuf::uint8* AcceptMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.AcceptMessage)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.AcceptMessage)
  return target;
}

int AcceptMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptMessage::MergeFrom(const AcceptMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptMessage::CopyFrom(const AcceptMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AcceptMessage::Swap(AcceptMessage* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptMessage_descriptor_;
  metadata.reflection = AcceptMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AreYouThereMessage::kGroupIdFieldNumber;
const int AreYouThereMessage::kSequenceNoFieldNumber;
#endif  // !_MSC_VER

AreYouThereMessage::AreYouThereMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.AreYouThereMessage)
}

void AreYouThereMessage::InitAsDefaultInstance() {
}

AreYouThereMessage::AreYouThereMessage(const AreYouThereMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.AreYouThereMessage)
}

void AreYouThereMessage::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0u;
  sequence_no_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreYouThereMessage::~AreYouThereMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.AreYouThereMessage)
  SharedDtor();
}

void AreYouThereMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AreYouThereMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreYouThereMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreYouThereMessage_descriptor_;
}

const AreYouThereMessage& AreYouThereMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

AreYouThereMessage* AreYouThereMessage::default_instance_ = NULL;

AreYouThereMessage* AreYouThereMessage::New() const {
  return new AreYouThereMessage;
}

void AreYouThereMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AreYouThereMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(group_id_, sequence_no_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreYouThereMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.AreYouThereMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence_no;
        break;
      }

      // required uint32 sequence_no = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_no_)));
          set_has_sequence_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.AreYouThereMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.AreYouThereMessage)
  return false;
#undef DO_
}

void AreYouThereMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.AreYouThereMessage)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // required uint32 sequence_no = 2;
  if (has_sequence_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence_no(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.AreYouThereMessage)
}

::google::protobuf::uint8* AreYouThereMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.AreYouThereMessage)
  // required uint32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // required uint32 sequence_no = 2;
  if (has_sequence_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence_no(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.AreYouThereMessage)
  return target;
}

int AreYouThereMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

    // required uint32 sequence_no = 2;
    if (has_sequence_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_no());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreYouThereMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreYouThereMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreYouThereMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreYouThereMessage::MergeFrom(const AreYouThereMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sequence_no()) {
      set_sequence_no(from.sequence_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreYouThereMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreYouThereMessage::CopyFrom(const AreYouThereMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreYouThereMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AreYouThereMessage::Swap(AreYouThereMessage* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(sequence_no_, other->sequence_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreYouThereMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreYouThereMessage_descriptor_;
  metadata.reflection = AreYouThereMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerListQueryMessage::kRequesterFieldNumber;
#endif  // !_MSC_VER

PeerListQueryMessage::PeerListQueryMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.PeerListQueryMessage)
}

void PeerListQueryMessage::InitAsDefaultInstance() {
}

PeerListQueryMessage::PeerListQueryMessage(const PeerListQueryMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.PeerListQueryMessage)
}

void PeerListQueryMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requester_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerListQueryMessage::~PeerListQueryMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.PeerListQueryMessage)
  SharedDtor();
}

void PeerListQueryMessage::SharedDtor() {
  if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requester_;
  }
  if (this != default_instance_) {
  }
}

void PeerListQueryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerListQueryMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerListQueryMessage_descriptor_;
}

const PeerListQueryMessage& PeerListQueryMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

PeerListQueryMessage* PeerListQueryMessage::default_instance_ = NULL;

PeerListQueryMessage* PeerListQueryMessage::New() const {
  return new PeerListQueryMessage;
}

void PeerListQueryMessage::Clear() {
  if (has_requester()) {
    if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      requester_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerListQueryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.PeerListQueryMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requester = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requester()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requester().data(), this->requester().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requester");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.PeerListQueryMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.PeerListQueryMessage)
  return false;
#undef DO_
}

void PeerListQueryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.PeerListQueryMessage)
  // required string requester = 1;
  if (has_requester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requester().data(), this->requester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requester");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->requester(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.PeerListQueryMessage)
}

::google::protobuf::uint8* PeerListQueryMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.PeerListQueryMessage)
  // required string requester = 1;
  if (has_requester()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requester().data(), this->requester().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requester");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requester(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.PeerListQueryMessage)
  return target;
}

int PeerListQueryMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string requester = 1;
    if (has_requester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requester());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerListQueryMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerListQueryMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerListQueryMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerListQueryMessage::MergeFrom(const PeerListQueryMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requester()) {
      set_requester(from.requester());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerListQueryMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerListQueryMessage::CopyFrom(const PeerListQueryMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerListQueryMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PeerListQueryMessage::Swap(PeerListQueryMessage* other) {
  if (other != this) {
    std::swap(requester_, other->requester_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerListQueryMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerListQueryMessage_descriptor_;
  metadata.reflection = PeerListQueryMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectedPeerMessage::kUuidFieldNumber;
const int ConnectedPeerMessage::kHostFieldNumber;
const int ConnectedPeerMessage::kPortFieldNumber;
#endif  // !_MSC_VER

ConnectedPeerMessage::ConnectedPeerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.ConnectedPeerMessage)
}

void ConnectedPeerMessage::InitAsDefaultInstance() {
}

ConnectedPeerMessage::ConnectedPeerMessage(const ConnectedPeerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.ConnectedPeerMessage)
}

void ConnectedPeerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectedPeerMessage::~ConnectedPeerMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.ConnectedPeerMessage)
  SharedDtor();
}

void ConnectedPeerMessage::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void ConnectedPeerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectedPeerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectedPeerMessage_descriptor_;
}

const ConnectedPeerMessage& ConnectedPeerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

ConnectedPeerMessage* ConnectedPeerMessage::default_instance_ = NULL;

ConnectedPeerMessage* ConnectedPeerMessage::New() const {
  return new ConnectedPeerMessage;
}

void ConnectedPeerMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectedPeerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.ConnectedPeerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }

      // required string host = 2;
      case 2: {
        if (tag == 18) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_port;
        break;
      }

      // required string port = 3;
      case 3: {
        if (tag == 26) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.ConnectedPeerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.ConnectedPeerMessage)
  return false;
#undef DO_
}

void ConnectedPeerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.ConnectedPeerMessage)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host(), output);
  }

  // required string port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.ConnectedPeerMessage)
}

::google::protobuf::uint8* ConnectedPeerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.ConnectedPeerMessage)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }

  // required string port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.ConnectedPeerMessage)
  return target;
}

int ConnectedPeerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required string port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectedPeerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectedPeerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectedPeerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectedPeerMessage::MergeFrom(const ConnectedPeerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectedPeerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectedPeerMessage::CopyFrom(const ConnectedPeerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedPeerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConnectedPeerMessage::Swap(ConnectedPeerMessage* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectedPeerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectedPeerMessage_descriptor_;
  metadata.reflection = ConnectedPeerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerListMessage::kConnectedPeerMessageFieldNumber;
#endif  // !_MSC_VER

PeerListMessage::PeerListMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.PeerListMessage)
}

void PeerListMessage::InitAsDefaultInstance() {
}

PeerListMessage::PeerListMessage(const PeerListMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.PeerListMessage)
}

void PeerListMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeerListMessage::~PeerListMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.PeerListMessage)
  SharedDtor();
}

void PeerListMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeerListMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerListMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerListMessage_descriptor_;
}

const PeerListMessage& PeerListMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

PeerListMessage* PeerListMessage::default_instance_ = NULL;

PeerListMessage* PeerListMessage::New() const {
  return new PeerListMessage;
}

void PeerListMessage::Clear() {
  connected_peer_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeerListMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.PeerListMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .freedm.broker.gm.ConnectedPeerMessage connected_peer_message = 1;
      case 1: {
        if (tag == 10) {
         parse_connected_peer_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connected_peer_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_connected_peer_message;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.PeerListMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.PeerListMessage)
  return false;
#undef DO_
}

void PeerListMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.PeerListMessage)
  // repeated .freedm.broker.gm.ConnectedPeerMessage connected_peer_message = 1;
  for (int i = 0; i < this->connected_peer_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->connected_peer_message(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.PeerListMessage)
}

::google::protobuf::uint8* PeerListMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.PeerListMessage)
  // repeated .freedm.broker.gm.ConnectedPeerMessage connected_peer_message = 1;
  for (int i = 0; i < this->connected_peer_message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->connected_peer_message(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.PeerListMessage)
  return target;
}

int PeerListMessage::ByteSize() const {
  int total_size = 0;

  // repeated .freedm.broker.gm.ConnectedPeerMessage connected_peer_message = 1;
  total_size += 1 * this->connected_peer_message_size();
  for (int i = 0; i < this->connected_peer_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connected_peer_message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerListMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeerListMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerListMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerListMessage::MergeFrom(const PeerListMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  connected_peer_message_.MergeFrom(from.connected_peer_message_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeerListMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerListMessage::CopyFrom(const PeerListMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerListMessage::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->connected_peer_message())) return false;
  return true;
}

void PeerListMessage::Swap(PeerListMessage* other) {
  if (other != this) {
    connected_peer_message_.Swap(&other->connected_peer_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeerListMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerListMessage_descriptor_;
  metadata.reflection = PeerListMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupManagementMessage::kAreYouCoordinatorMessageFieldNumber;
const int GroupManagementMessage::kInviteMessageFieldNumber;
const int GroupManagementMessage::kAreYouCoordinatorResponseMessageFieldNumber;
const int GroupManagementMessage::kAreYouThereResponseMessageFieldNumber;
const int GroupManagementMessage::kAcceptMessageFieldNumber;
const int GroupManagementMessage::kAreYouThereMessageFieldNumber;
const int GroupManagementMessage::kPeerListQueryMessageFieldNumber;
const int GroupManagementMessage::kPeerListMessageFieldNumber;
#endif  // !_MSC_VER

GroupManagementMessage::GroupManagementMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.gm.GroupManagementMessage)
}

void GroupManagementMessage::InitAsDefaultInstance() {
  are_you_coordinator_message_ = const_cast< ::freedm::broker::gm::AreYouCoordinatorMessage*>(&::freedm::broker::gm::AreYouCoordinatorMessage::default_instance());
  invite_message_ = const_cast< ::freedm::broker::gm::InviteMessage*>(&::freedm::broker::gm::InviteMessage::default_instance());
  are_you_coordinator_response_message_ = const_cast< ::freedm::broker::gm::AreYouCoordinatorResponseMessage*>(&::freedm::broker::gm::AreYouCoordinatorResponseMessage::default_instance());
  are_you_there_response_message_ = const_cast< ::freedm::broker::gm::AreYouThereResponseMessage*>(&::freedm::broker::gm::AreYouThereResponseMessage::default_instance());
  accept_message_ = const_cast< ::freedm::broker::gm::AcceptMessage*>(&::freedm::broker::gm::AcceptMessage::default_instance());
  are_you_there_message_ = const_cast< ::freedm::broker::gm::AreYouThereMessage*>(&::freedm::broker::gm::AreYouThereMessage::default_instance());
  peer_list_query_message_ = const_cast< ::freedm::broker::gm::PeerListQueryMessage*>(&::freedm::broker::gm::PeerListQueryMessage::default_instance());
  peer_list_message_ = const_cast< ::freedm::broker::gm::PeerListMessage*>(&::freedm::broker::gm::PeerListMessage::default_instance());
}

GroupManagementMessage::GroupManagementMessage(const GroupManagementMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.gm.GroupManagementMessage)
}

void GroupManagementMessage::SharedCtor() {
  _cached_size_ = 0;
  are_you_coordinator_message_ = NULL;
  invite_message_ = NULL;
  are_you_coordinator_response_message_ = NULL;
  are_you_there_response_message_ = NULL;
  accept_message_ = NULL;
  are_you_there_message_ = NULL;
  peer_list_query_message_ = NULL;
  peer_list_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupManagementMessage::~GroupManagementMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.gm.GroupManagementMessage)
  SharedDtor();
}

void GroupManagementMessage::SharedDtor() {
  if (this != default_instance_) {
    delete are_you_coordinator_message_;
    delete invite_message_;
    delete are_you_coordinator_response_message_;
    delete are_you_there_response_message_;
    delete accept_message_;
    delete are_you_there_message_;
    delete peer_list_query_message_;
    delete peer_list_message_;
  }
}

void GroupManagementMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupManagementMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupManagementMessage_descriptor_;
}

const GroupManagementMessage& GroupManagementMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupManagement_2eproto();
  return *default_instance_;
}

GroupManagementMessage* GroupManagementMessage::default_instance_ = NULL;

GroupManagementMessage* GroupManagementMessage::New() const {
  return new GroupManagementMessage;
}

void GroupManagementMessage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_are_you_coordinator_message()) {
      if (are_you_coordinator_message_ != NULL) are_you_coordinator_message_->::freedm::broker::gm::AreYouCoordinatorMessage::Clear();
    }
    if (has_invite_message()) {
      if (invite_message_ != NULL) invite_message_->::freedm::broker::gm::InviteMessage::Clear();
    }
    if (has_are_you_coordinator_response_message()) {
      if (are_you_coordinator_response_message_ != NULL) are_you_coordinator_response_message_->::freedm::broker::gm::AreYouCoordinatorResponseMessage::Clear();
    }
    if (has_are_you_there_response_message()) {
      if (are_you_there_response_message_ != NULL) are_you_there_response_message_->::freedm::broker::gm::AreYouThereResponseMessage::Clear();
    }
    if (has_accept_message()) {
      if (accept_message_ != NULL) accept_message_->::freedm::broker::gm::AcceptMessage::Clear();
    }
    if (has_are_you_there_message()) {
      if (are_you_there_message_ != NULL) are_you_there_message_->::freedm::broker::gm::AreYouThereMessage::Clear();
    }
    if (has_peer_list_query_message()) {
      if (peer_list_query_message_ != NULL) peer_list_query_message_->::freedm::broker::gm::PeerListQueryMessage::Clear();
    }
    if (has_peer_list_message()) {
      if (peer_list_message_ != NULL) peer_list_message_->::freedm::broker::gm::PeerListMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupManagementMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.gm.GroupManagementMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .freedm.broker.gm.AreYouCoordinatorMessage are_you_coordinator_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_are_you_coordinator_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invite_message;
        break;
      }

      // optional .freedm.broker.gm.InviteMessage invite_message = 2;
      case 2: {
        if (tag == 18) {
         parse_invite_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_are_you_coordinator_response_message;
        break;
      }

      // optional .freedm.broker.gm.AreYouCoordinatorResponseMessage are_you_coordinator_response_message = 3;
      case 3: {
        if (tag == 26) {
         parse_are_you_coordinator_response_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_are_you_coordinator_response_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_are_you_there_response_message;
        break;
      }

      // optional .freedm.broker.gm.AreYouThereResponseMessage are_you_there_response_message = 4;
      case 4: {
        if (tag == 34) {
         parse_are_you_there_response_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_are_you_there_response_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accept_message;
        break;
      }

      // optional .freedm.broker.gm.AcceptMessage accept_message = 5;
      case 5: {
        if (tag == 42) {
         parse_accept_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accept_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_are_you_there_message;
        break;
      }

      // optional .freedm.broker.gm.AreYouThereMessage are_you_there_message = 6;
      case 6: {
        if (tag == 50) {
         parse_are_you_there_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_are_you_there_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_peer_list_query_message;
        break;
      }

      // optional .freedm.broker.gm.PeerListQueryMessage peer_list_query_message = 7;
      case 7: {
        if (tag == 58) {
         parse_peer_list_query_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer_list_query_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_peer_list_message;
        break;
      }

      // optional .freedm.broker.gm.PeerListMessage peer_list_message = 8;
      case 8: {
        if (tag == 66) {
         parse_peer_list_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer_list_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.gm.GroupManagementMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.gm.GroupManagementMessage)
  return false;
#undef DO_
}

void GroupManagementMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.gm.GroupManagementMessage)
  // optional .freedm.broker.gm.AreYouCoordinatorMessage are_you_coordinator_message = 1;
  if (has_are_you_coordinator_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->are_you_coordinator_message(), output);
  }

  // optional .freedm.broker.gm.InviteMessage invite_message = 2;
  if (has_invite_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invite_message(), output);
  }

  // optional .freedm.broker.gm.AreYouCoordinatorResponseMessage are_you_coordinator_response_message = 3;
  if (has_are_you_coordinator_response_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->are_you_coordinator_response_message(), output);
  }

  // optional .freedm.broker.gm.AreYouThereResponseMessage are_you_there_response_message = 4;
  if (has_are_you_there_response_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->are_you_there_response_message(), output);
  }

  // optional .freedm.broker.gm.AcceptMessage accept_message = 5;
  if (has_accept_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->accept_message(), output);
  }

  // optional .freedm.broker.gm.AreYouThereMessage are_you_there_message = 6;
  if (has_are_you_there_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->are_you_there_message(), output);
  }

  // optional .freedm.broker.gm.PeerListQueryMessage peer_list_query_message = 7;
  if (has_peer_list_query_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->peer_list_query_message(), output);
  }

  // optional .freedm.broker.gm.PeerListMessage peer_list_message = 8;
  if (has_peer_list_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->peer_list_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.gm.GroupManagementMessage)
}

::google::protobuf::uint8* GroupManagementMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.gm.GroupManagementMessage)
  // optional .freedm.broker.gm.AreYouCoordinatorMessage are_you_coordinator_message = 1;
  if (has_are_you_coordinator_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->are_you_coordinator_message(), target);
  }

  // optional .freedm.broker.gm.InviteMessage invite_message = 2;
  if (has_invite_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invite_message(), target);
  }

  // optional .freedm.broker.gm.AreYouCoordinatorResponseMessage are_you_coordinator_response_message = 3;
  if (has_are_you_coordinator_response_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->are_you_coordinator_response_message(), target);
  }

  // optional .freedm.broker.gm.AreYouThereResponseMessage are_you_there_response_message = 4;
  if (has_are_you_there_response_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->are_you_there_response_message(), target);
  }

  // optional .freedm.broker.gm.AcceptMessage accept_message = 5;
  if (has_accept_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->accept_message(), target);
  }

  // optional .freedm.broker.gm.AreYouThereMessage are_you_there_message = 6;
  if (has_are_you_there_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->are_you_there_message(), target);
  }

  // optional .freedm.broker.gm.PeerListQueryMessage peer_list_query_message = 7;
  if (has_peer_list_query_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->peer_list_query_message(), target);
  }

  // optional .freedm.broker.gm.PeerListMessage peer_list_message = 8;
  if (has_peer_list_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->peer_list_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.gm.GroupManagementMessage)
  return target;
}

int GroupManagementMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .freedm.broker.gm.AreYouCoordinatorMessage are_you_coordinator_message = 1;
    if (has_are_you_coordinator_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->are_you_coordinator_message());
    }

    // optional .freedm.broker.gm.InviteMessage invite_message = 2;
    if (has_invite_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite_message());
    }

    // optional .freedm.broker.gm.AreYouCoordinatorResponseMessage are_you_coordinator_response_message = 3;
    if (has_are_you_coordinator_response_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->are_you_coordinator_response_message());
    }

    // optional .freedm.broker.gm.AreYouThereResponseMessage are_you_there_response_message = 4;
    if (has_are_you_there_response_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->are_you_there_response_message());
    }

    // optional .freedm.broker.gm.AcceptMessage accept_message = 5;
    if (has_accept_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->accept_message());
    }

    // optional .freedm.broker.gm.AreYouThereMessage are_you_there_message = 6;
    if (has_are_you_there_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->are_you_there_message());
    }

    // optional .freedm.broker.gm.PeerListQueryMessage peer_list_query_message = 7;
    if (has_peer_list_query_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer_list_query_message());
    }

    // optional .freedm.broker.gm.PeerListMessage peer_list_message = 8;
    if (has_peer_list_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peer_list_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupManagementMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupManagementMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupManagementMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupManagementMessage::MergeFrom(const GroupManagementMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_are_you_coordinator_message()) {
      mutable_are_you_coordinator_message()->::freedm::broker::gm::AreYouCoordinatorMessage::MergeFrom(from.are_you_coordinator_message());
    }
    if (from.has_invite_message()) {
      mutable_invite_message()->::freedm::broker::gm::InviteMessage::MergeFrom(from.invite_message());
    }
    if (from.has_are_you_coordinator_response_message()) {
      mutable_are_you_coordinator_response_message()->::freedm::broker::gm::AreYouCoordinatorResponseMessage::MergeFrom(from.are_you_coordinator_response_message());
    }
    if (from.has_are_you_there_response_message()) {
      mutable_are_you_there_response_message()->::freedm::broker::gm::AreYouThereResponseMessage::MergeFrom(from.are_you_there_response_message());
    }
    if (from.has_accept_message()) {
      mutable_accept_message()->::freedm::broker::gm::AcceptMessage::MergeFrom(from.accept_message());
    }
    if (from.has_are_you_there_message()) {
      mutable_are_you_there_message()->::freedm::broker::gm::AreYouThereMessage::MergeFrom(from.are_you_there_message());
    }
    if (from.has_peer_list_query_message()) {
      mutable_peer_list_query_message()->::freedm::broker::gm::PeerListQueryMessage::MergeFrom(from.peer_list_query_message());
    }
    if (from.has_peer_list_message()) {
      mutable_peer_list_message()->::freedm::broker::gm::PeerListMessage::MergeFrom(from.peer_list_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupManagementMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupManagementMessage::CopyFrom(const GroupManagementMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupManagementMessage::IsInitialized() const {

  if (has_are_you_coordinator_message()) {
    if (!this->are_you_coordinator_message().IsInitialized()) return false;
  }
  if (has_invite_message()) {
    if (!this->invite_message().IsInitialized()) return false;
  }
  if (has_are_you_coordinator_response_message()) {
    if (!this->are_you_coordinator_response_message().IsInitialized()) return false;
  }
  if (has_are_you_there_response_message()) {
    if (!this->are_you_there_response_message().IsInitialized()) return false;
  }
  if (has_accept_message()) {
    if (!this->accept_message().IsInitialized()) return false;
  }
  if (has_are_you_there_message()) {
    if (!this->are_you_there_message().IsInitialized()) return false;
  }
  if (has_peer_list_query_message()) {
    if (!this->peer_list_query_message().IsInitialized()) return false;
  }
  if (has_peer_list_message()) {
    if (!this->peer_list_message().IsInitialized()) return false;
  }
  return true;
}

void GroupManagementMessage::Swap(GroupManagementMessage* other) {
  if (other != this) {
    std::swap(are_you_coordinator_message_, other->are_you_coordinator_message_);
    std::swap(invite_message_, other->invite_message_);
    std::swap(are_you_coordinator_response_message_, other->are_you_coordinator_response_message_);
    std::swap(are_you_there_response_message_, other->are_you_there_response_message_);
    std::swap(accept_message_, other->accept_message_);
    std::swap(are_you_there_message_, other->are_you_there_message_);
    std::swap(peer_list_query_message_, other->peer_list_query_message_);
    std::swap(peer_list_message_, other->peer_list_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupManagementMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupManagementMessage_descriptor_;
  metadata.reflection = GroupManagementMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gm
}  // namespace broker
}  // namespace freedm

// @@protoc_insertion_point(global_scope)
