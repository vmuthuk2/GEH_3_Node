// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModuleMessage.proto

#ifndef PROTOBUF_ModuleMessage_2eproto__INCLUDED
#define PROTOBUF_ModuleMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ClockSynchronizer.pb.h"
#include "GroupManagement.pb.h"
#include "LoadBalancing.pb.h"
#include "StateCollection.pb.h"
#include "VoltVarCtrl.pb.h"
// @@protoc_insertion_point(includes)

namespace freedm {
namespace broker {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ModuleMessage_2eproto();
void protobuf_AssignDesc_ModuleMessage_2eproto();
void protobuf_ShutdownFile_ModuleMessage_2eproto();

class ModuleMessage;

// ===================================================================

class ModuleMessage : public ::google::protobuf::Message {
 public:
  ModuleMessage();
  virtual ~ModuleMessage();

  ModuleMessage(const ModuleMessage& from);

  inline ModuleMessage& operator=(const ModuleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleMessage& default_instance();

  void Swap(ModuleMessage* other);

  // implements Message ----------------------------------------------

  ModuleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModuleMessage& from);
  void MergeFrom(const ModuleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string recipient_module = 1;
  inline bool has_recipient_module() const;
  inline void clear_recipient_module();
  static const int kRecipientModuleFieldNumber = 1;
  inline const ::std::string& recipient_module() const;
  inline void set_recipient_module(const ::std::string& value);
  inline void set_recipient_module(const char* value);
  inline void set_recipient_module(const char* value, size_t size);
  inline ::std::string* mutable_recipient_module();
  inline ::std::string* release_recipient_module();
  inline void set_allocated_recipient_module(::std::string* recipient_module);

  // optional .freedm.broker.gm.GroupManagementMessage group_management_message = 2;
  inline bool has_group_management_message() const;
  inline void clear_group_management_message();
  static const int kGroupManagementMessageFieldNumber = 2;
  inline const ::freedm::broker::gm::GroupManagementMessage& group_management_message() const;
  inline ::freedm::broker::gm::GroupManagementMessage* mutable_group_management_message();
  inline ::freedm::broker::gm::GroupManagementMessage* release_group_management_message();
  inline void set_allocated_group_management_message(::freedm::broker::gm::GroupManagementMessage* group_management_message);

  // optional .freedm.broker.sc.StateCollectionMessage state_collection_message = 3;
  inline bool has_state_collection_message() const;
  inline void clear_state_collection_message();
  static const int kStateCollectionMessageFieldNumber = 3;
  inline const ::freedm::broker::sc::StateCollectionMessage& state_collection_message() const;
  inline ::freedm::broker::sc::StateCollectionMessage* mutable_state_collection_message();
  inline ::freedm::broker::sc::StateCollectionMessage* release_state_collection_message();
  inline void set_allocated_state_collection_message(::freedm::broker::sc::StateCollectionMessage* state_collection_message);

  // optional .freedm.broker.lb.LoadBalancingMessage load_balancing_message = 4;
  inline bool has_load_balancing_message() const;
  inline void clear_load_balancing_message();
  static const int kLoadBalancingMessageFieldNumber = 4;
  inline const ::freedm::broker::lb::LoadBalancingMessage& load_balancing_message() const;
  inline ::freedm::broker::lb::LoadBalancingMessage* mutable_load_balancing_message();
  inline ::freedm::broker::lb::LoadBalancingMessage* release_load_balancing_message();
  inline void set_allocated_load_balancing_message(::freedm::broker::lb::LoadBalancingMessage* load_balancing_message);

  // optional .freedm.broker.ClockSynchronizerMessage clock_synchronizer_message = 5;
  inline bool has_clock_synchronizer_message() const;
  inline void clear_clock_synchronizer_message();
  static const int kClockSynchronizerMessageFieldNumber = 5;
  inline const ::freedm::broker::ClockSynchronizerMessage& clock_synchronizer_message() const;
  inline ::freedm::broker::ClockSynchronizerMessage* mutable_clock_synchronizer_message();
  inline ::freedm::broker::ClockSynchronizerMessage* release_clock_synchronizer_message();
  inline void set_allocated_clock_synchronizer_message(::freedm::broker::ClockSynchronizerMessage* clock_synchronizer_message);

  // optional .freedm.broker.vvc.VoltVarMessage volt_var_message = 6;
  inline bool has_volt_var_message() const;
  inline void clear_volt_var_message();
  static const int kVoltVarMessageFieldNumber = 6;
  inline const ::freedm::broker::vvc::VoltVarMessage& volt_var_message() const;
  inline ::freedm::broker::vvc::VoltVarMessage* mutable_volt_var_message();
  inline ::freedm::broker::vvc::VoltVarMessage* release_volt_var_message();
  inline void set_allocated_volt_var_message(::freedm::broker::vvc::VoltVarMessage* volt_var_message);

  // @@protoc_insertion_point(class_scope:freedm.broker.ModuleMessage)
 private:
  inline void set_has_recipient_module();
  inline void clear_has_recipient_module();
  inline void set_has_group_management_message();
  inline void clear_has_group_management_message();
  inline void set_has_state_collection_message();
  inline void clear_has_state_collection_message();
  inline void set_has_load_balancing_message();
  inline void clear_has_load_balancing_message();
  inline void set_has_clock_synchronizer_message();
  inline void clear_has_clock_synchronizer_message();
  inline void set_has_volt_var_message();
  inline void clear_has_volt_var_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* recipient_module_;
  ::freedm::broker::gm::GroupManagementMessage* group_management_message_;
  ::freedm::broker::sc::StateCollectionMessage* state_collection_message_;
  ::freedm::broker::lb::LoadBalancingMessage* load_balancing_message_;
  ::freedm::broker::ClockSynchronizerMessage* clock_synchronizer_message_;
  ::freedm::broker::vvc::VoltVarMessage* volt_var_message_;
  friend void  protobuf_AddDesc_ModuleMessage_2eproto();
  friend void protobuf_AssignDesc_ModuleMessage_2eproto();
  friend void protobuf_ShutdownFile_ModuleMessage_2eproto();

  void InitAsDefaultInstance();
  static ModuleMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ModuleMessage

// required string recipient_module = 1;
inline bool ModuleMessage::has_recipient_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleMessage::set_has_recipient_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleMessage::clear_has_recipient_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleMessage::clear_recipient_module() {
  if (recipient_module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipient_module_->clear();
  }
  clear_has_recipient_module();
}
inline const ::std::string& ModuleMessage::recipient_module() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ModuleMessage.recipient_module)
  return *recipient_module_;
}
inline void ModuleMessage::set_recipient_module(const ::std::string& value) {
  set_has_recipient_module();
  if (recipient_module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipient_module_ = new ::std::string;
  }
  recipient_module_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.ModuleMessage.recipient_module)
}
inline void ModuleMessage::set_recipient_module(const char* value) {
  set_has_recipient_module();
  if (recipient_module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipient_module_ = new ::std::string;
  }
  recipient_module_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.ModuleMessage.recipient_module)
}
inline void ModuleMessage::set_recipient_module(const char* value, size_t size) {
  set_has_recipient_module();
  if (recipient_module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipient_module_ = new ::std::string;
  }
  recipient_module_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.ModuleMessage.recipient_module)
}
inline ::std::string* ModuleMessage::mutable_recipient_module() {
  set_has_recipient_module();
  if (recipient_module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recipient_module_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.ModuleMessage.recipient_module)
  return recipient_module_;
}
inline ::std::string* ModuleMessage::release_recipient_module() {
  clear_has_recipient_module();
  if (recipient_module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recipient_module_;
    recipient_module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ModuleMessage::set_allocated_recipient_module(::std::string* recipient_module) {
  if (recipient_module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recipient_module_;
  }
  if (recipient_module) {
    set_has_recipient_module();
    recipient_module_ = recipient_module;
  } else {
    clear_has_recipient_module();
    recipient_module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ModuleMessage.recipient_module)
}

// optional .freedm.broker.gm.GroupManagementMessage group_management_message = 2;
inline bool ModuleMessage::has_group_management_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleMessage::set_has_group_management_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleMessage::clear_has_group_management_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleMessage::clear_group_management_message() {
  if (group_management_message_ != NULL) group_management_message_->::freedm::broker::gm::GroupManagementMessage::Clear();
  clear_has_group_management_message();
}
inline const ::freedm::broker::gm::GroupManagementMessage& ModuleMessage::group_management_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ModuleMessage.group_management_message)
  return group_management_message_ != NULL ? *group_management_message_ : *default_instance_->group_management_message_;
}
inline ::freedm::broker::gm::GroupManagementMessage* ModuleMessage::mutable_group_management_message() {
  set_has_group_management_message();
  if (group_management_message_ == NULL) group_management_message_ = new ::freedm::broker::gm::GroupManagementMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.ModuleMessage.group_management_message)
  return group_management_message_;
}
inline ::freedm::broker::gm::GroupManagementMessage* ModuleMessage::release_group_management_message() {
  clear_has_group_management_message();
  ::freedm::broker::gm::GroupManagementMessage* temp = group_management_message_;
  group_management_message_ = NULL;
  return temp;
}
inline void ModuleMessage::set_allocated_group_management_message(::freedm::broker::gm::GroupManagementMessage* group_management_message) {
  delete group_management_message_;
  group_management_message_ = group_management_message;
  if (group_management_message) {
    set_has_group_management_message();
  } else {
    clear_has_group_management_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ModuleMessage.group_management_message)
}

// optional .freedm.broker.sc.StateCollectionMessage state_collection_message = 3;
inline bool ModuleMessage::has_state_collection_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModuleMessage::set_has_state_collection_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModuleMessage::clear_has_state_collection_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModuleMessage::clear_state_collection_message() {
  if (state_collection_message_ != NULL) state_collection_message_->::freedm::broker::sc::StateCollectionMessage::Clear();
  clear_has_state_collection_message();
}
inline const ::freedm::broker::sc::StateCollectionMessage& ModuleMessage::state_collection_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ModuleMessage.state_collection_message)
  return state_collection_message_ != NULL ? *state_collection_message_ : *default_instance_->state_collection_message_;
}
inline ::freedm::broker::sc::StateCollectionMessage* ModuleMessage::mutable_state_collection_message() {
  set_has_state_collection_message();
  if (state_collection_message_ == NULL) state_collection_message_ = new ::freedm::broker::sc::StateCollectionMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.ModuleMessage.state_collection_message)
  return state_collection_message_;
}
inline ::freedm::broker::sc::StateCollectionMessage* ModuleMessage::release_state_collection_message() {
  clear_has_state_collection_message();
  ::freedm::broker::sc::StateCollectionMessage* temp = state_collection_message_;
  state_collection_message_ = NULL;
  return temp;
}
inline void ModuleMessage::set_allocated_state_collection_message(::freedm::broker::sc::StateCollectionMessage* state_collection_message) {
  delete state_collection_message_;
  state_collection_message_ = state_collection_message;
  if (state_collection_message) {
    set_has_state_collection_message();
  } else {
    clear_has_state_collection_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ModuleMessage.state_collection_message)
}

// optional .freedm.broker.lb.LoadBalancingMessage load_balancing_message = 4;
inline bool ModuleMessage::has_load_balancing_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModuleMessage::set_has_load_balancing_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModuleMessage::clear_has_load_balancing_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModuleMessage::clear_load_balancing_message() {
  if (load_balancing_message_ != NULL) load_balancing_message_->::freedm::broker::lb::LoadBalancingMessage::Clear();
  clear_has_load_balancing_message();
}
inline const ::freedm::broker::lb::LoadBalancingMessage& ModuleMessage::load_balancing_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ModuleMessage.load_balancing_message)
  return load_balancing_message_ != NULL ? *load_balancing_message_ : *default_instance_->load_balancing_message_;
}
inline ::freedm::broker::lb::LoadBalancingMessage* ModuleMessage::mutable_load_balancing_message() {
  set_has_load_balancing_message();
  if (load_balancing_message_ == NULL) load_balancing_message_ = new ::freedm::broker::lb::LoadBalancingMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.ModuleMessage.load_balancing_message)
  return load_balancing_message_;
}
inline ::freedm::broker::lb::LoadBalancingMessage* ModuleMessage::release_load_balancing_message() {
  clear_has_load_balancing_message();
  ::freedm::broker::lb::LoadBalancingMessage* temp = load_balancing_message_;
  load_balancing_message_ = NULL;
  return temp;
}
inline void ModuleMessage::set_allocated_load_balancing_message(::freedm::broker::lb::LoadBalancingMessage* load_balancing_message) {
  delete load_balancing_message_;
  load_balancing_message_ = load_balancing_message;
  if (load_balancing_message) {
    set_has_load_balancing_message();
  } else {
    clear_has_load_balancing_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ModuleMessage.load_balancing_message)
}

// optional .freedm.broker.ClockSynchronizerMessage clock_synchronizer_message = 5;
inline bool ModuleMessage::has_clock_synchronizer_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModuleMessage::set_has_clock_synchronizer_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModuleMessage::clear_has_clock_synchronizer_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModuleMessage::clear_clock_synchronizer_message() {
  if (clock_synchronizer_message_ != NULL) clock_synchronizer_message_->::freedm::broker::ClockSynchronizerMessage::Clear();
  clear_has_clock_synchronizer_message();
}
inline const ::freedm::broker::ClockSynchronizerMessage& ModuleMessage::clock_synchronizer_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ModuleMessage.clock_synchronizer_message)
  return clock_synchronizer_message_ != NULL ? *clock_synchronizer_message_ : *default_instance_->clock_synchronizer_message_;
}
inline ::freedm::broker::ClockSynchronizerMessage* ModuleMessage::mutable_clock_synchronizer_message() {
  set_has_clock_synchronizer_message();
  if (clock_synchronizer_message_ == NULL) clock_synchronizer_message_ = new ::freedm::broker::ClockSynchronizerMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.ModuleMessage.clock_synchronizer_message)
  return clock_synchronizer_message_;
}
inline ::freedm::broker::ClockSynchronizerMessage* ModuleMessage::release_clock_synchronizer_message() {
  clear_has_clock_synchronizer_message();
  ::freedm::broker::ClockSynchronizerMessage* temp = clock_synchronizer_message_;
  clock_synchronizer_message_ = NULL;
  return temp;
}
inline void ModuleMessage::set_allocated_clock_synchronizer_message(::freedm::broker::ClockSynchronizerMessage* clock_synchronizer_message) {
  delete clock_synchronizer_message_;
  clock_synchronizer_message_ = clock_synchronizer_message;
  if (clock_synchronizer_message) {
    set_has_clock_synchronizer_message();
  } else {
    clear_has_clock_synchronizer_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ModuleMessage.clock_synchronizer_message)
}

// optional .freedm.broker.vvc.VoltVarMessage volt_var_message = 6;
inline bool ModuleMessage::has_volt_var_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModuleMessage::set_has_volt_var_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModuleMessage::clear_has_volt_var_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModuleMessage::clear_volt_var_message() {
  if (volt_var_message_ != NULL) volt_var_message_->::freedm::broker::vvc::VoltVarMessage::Clear();
  clear_has_volt_var_message();
}
inline const ::freedm::broker::vvc::VoltVarMessage& ModuleMessage::volt_var_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ModuleMessage.volt_var_message)
  return volt_var_message_ != NULL ? *volt_var_message_ : *default_instance_->volt_var_message_;
}
inline ::freedm::broker::vvc::VoltVarMessage* ModuleMessage::mutable_volt_var_message() {
  set_has_volt_var_message();
  if (volt_var_message_ == NULL) volt_var_message_ = new ::freedm::broker::vvc::VoltVarMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.ModuleMessage.volt_var_message)
  return volt_var_message_;
}
inline ::freedm::broker::vvc::VoltVarMessage* ModuleMessage::release_volt_var_message() {
  clear_has_volt_var_message();
  ::freedm::broker::vvc::VoltVarMessage* temp = volt_var_message_;
  volt_var_message_ = NULL;
  return temp;
}
inline void ModuleMessage::set_allocated_volt_var_message(::freedm::broker::vvc::VoltVarMessage* volt_var_message) {
  delete volt_var_message_;
  volt_var_message_ = volt_var_message;
  if (volt_var_message) {
    set_has_volt_var_message();
  } else {
    clear_has_volt_var_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ModuleMessage.volt_var_message)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace broker
}  // namespace freedm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ModuleMessage_2eproto__INCLUDED
