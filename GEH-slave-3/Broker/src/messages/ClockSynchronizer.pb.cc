// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClockSynchronizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClockSynchronizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace freedm {
namespace broker {

namespace {

const ::google::protobuf::Descriptor* ExchangeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeResponseMessage_TableEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeResponseMessage_TableEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClockSynchronizerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClockSynchronizerMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClockSynchronizer_2eproto() {
  protobuf_AddDesc_ClockSynchronizer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClockSynchronizer.proto");
  GOOGLE_CHECK(file != NULL);
  ExchangeMessage_descriptor_ = file->message_type(0);
  static const int ExchangeMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMessage, query_),
  };
  ExchangeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeMessage_descriptor_,
      ExchangeMessage::default_instance_,
      ExchangeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeMessage));
  ExchangeResponseMessage_descriptor_ = file->message_type(1);
  static const int ExchangeResponseMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage, table_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage, unsynchronized_sendtime_),
  };
  ExchangeResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeResponseMessage_descriptor_,
      ExchangeResponseMessage::default_instance_,
      ExchangeResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeResponseMessage));
  ExchangeResponseMessage_TableEntry_descriptor_ = ExchangeResponseMessage_descriptor_->nested_type(0);
  static const int ExchangeResponseMessage_TableEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage_TableEntry, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage_TableEntry, offset_secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage_TableEntry, offset_fracs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage_TableEntry, skew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage_TableEntry, weight_),
  };
  ExchangeResponseMessage_TableEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeResponseMessage_TableEntry_descriptor_,
      ExchangeResponseMessage_TableEntry::default_instance_,
      ExchangeResponseMessage_TableEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage_TableEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeResponseMessage_TableEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeResponseMessage_TableEntry));
  ClockSynchronizerMessage_descriptor_ = file->message_type(2);
  static const int ClockSynchronizerMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockSynchronizerMessage, exchange_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockSynchronizerMessage, exchange_response_message_),
  };
  ClockSynchronizerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClockSynchronizerMessage_descriptor_,
      ClockSynchronizerMessage::default_instance_,
      ClockSynchronizerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockSynchronizerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClockSynchronizerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClockSynchronizerMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClockSynchronizer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeMessage_descriptor_, &ExchangeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeResponseMessage_descriptor_, &ExchangeResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeResponseMessage_TableEntry_descriptor_, &ExchangeResponseMessage_TableEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClockSynchronizerMessage_descriptor_, &ClockSynchronizerMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClockSynchronizer_2eproto() {
  delete ExchangeMessage::default_instance_;
  delete ExchangeMessage_reflection_;
  delete ExchangeResponseMessage::default_instance_;
  delete ExchangeResponseMessage_reflection_;
  delete ExchangeResponseMessage_TableEntry::default_instance_;
  delete ExchangeResponseMessage_TableEntry_reflection_;
  delete ClockSynchronizerMessage::default_instance_;
  delete ClockSynchronizerMessage_reflection_;
}

void protobuf_AddDesc_ClockSynchronizer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ClockSynchronizer.proto\022\rfreedm.broker"
    "\" \n\017ExchangeMessage\022\r\n\005query\030\001 \002(\r\"\371\001\n\027E"
    "xchangeResponseMessage\022F\n\013table_entry\030\001 "
    "\003(\01321.freedm.broker.ExchangeResponseMess"
    "age.TableEntry\022\020\n\010response\030\002 \002(\r\022\037\n\027unsy"
    "nchronized_sendtime\030\003 \002(\t\032c\n\nTableEntry\022"
    "\014\n\004uuid\030\001 \002(\t\022\023\n\013offset_secs\030\002 \002(\r\022\024\n\014of"
    "fset_fracs\030\003 \002(\004\022\014\n\004skew\030\004 \002(\001\022\016\n\006weight"
    "\030\005 \002(\001\"\237\001\n\030ClockSynchronizerMessage\0228\n\020e"
    "xchange_message\030\001 \001(\0132\036.freedm.broker.Ex"
    "changeMessage\022I\n\031exchange_response_messa"
    "ge\030\002 \001(\0132&.freedm.broker.ExchangeRespons"
    "eMessage", 488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClockSynchronizer.proto", &protobuf_RegisterTypes);
  ExchangeMessage::default_instance_ = new ExchangeMessage();
  ExchangeResponseMessage::default_instance_ = new ExchangeResponseMessage();
  ExchangeResponseMessage_TableEntry::default_instance_ = new ExchangeResponseMessage_TableEntry();
  ClockSynchronizerMessage::default_instance_ = new ClockSynchronizerMessage();
  ExchangeMessage::default_instance_->InitAsDefaultInstance();
  ExchangeResponseMessage::default_instance_->InitAsDefaultInstance();
  ExchangeResponseMessage_TableEntry::default_instance_->InitAsDefaultInstance();
  ClockSynchronizerMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClockSynchronizer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClockSynchronizer_2eproto {
  StaticDescriptorInitializer_ClockSynchronizer_2eproto() {
    protobuf_AddDesc_ClockSynchronizer_2eproto();
  }
} static_descriptor_initializer_ClockSynchronizer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExchangeMessage::kQueryFieldNumber;
#endif  // !_MSC_VER

ExchangeMessage::ExchangeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.ExchangeMessage)
}

void ExchangeMessage::InitAsDefaultInstance() {
}

ExchangeMessage::ExchangeMessage(const ExchangeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.ExchangeMessage)
}

void ExchangeMessage::SharedCtor() {
  _cached_size_ = 0;
  query_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeMessage::~ExchangeMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.ExchangeMessage)
  SharedDtor();
}

void ExchangeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeMessage_descriptor_;
}

const ExchangeMessage& ExchangeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClockSynchronizer_2eproto();
  return *default_instance_;
}

ExchangeMessage* ExchangeMessage::default_instance_ = NULL;

ExchangeMessage* ExchangeMessage::New() const {
  return new ExchangeMessage;
}

void ExchangeMessage::Clear() {
  query_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.ExchangeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 query = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_)));
          set_has_query();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.ExchangeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.ExchangeMessage)
  return false;
#undef DO_
}

void ExchangeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.ExchangeMessage)
  // required uint32 query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->query(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.ExchangeMessage)
}

::google::protobuf::uint8* ExchangeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.ExchangeMessage)
  // required uint32 query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->query(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.ExchangeMessage)
  return target;
}

int ExchangeMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeMessage::MergeFrom(const ExchangeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeMessage::CopyFrom(const ExchangeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExchangeMessage::Swap(ExchangeMessage* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeMessage_descriptor_;
  metadata.reflection = ExchangeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeResponseMessage_TableEntry::kUuidFieldNumber;
const int ExchangeResponseMessage_TableEntry::kOffsetSecsFieldNumber;
const int ExchangeResponseMessage_TableEntry::kOffsetFracsFieldNumber;
const int ExchangeResponseMessage_TableEntry::kSkewFieldNumber;
const int ExchangeResponseMessage_TableEntry::kWeightFieldNumber;
#endif  // !_MSC_VER

ExchangeResponseMessage_TableEntry::ExchangeResponseMessage_TableEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.ExchangeResponseMessage.TableEntry)
}

void ExchangeResponseMessage_TableEntry::InitAsDefaultInstance() {
}

ExchangeResponseMessage_TableEntry::ExchangeResponseMessage_TableEntry(const ExchangeResponseMessage_TableEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.ExchangeResponseMessage.TableEntry)
}

void ExchangeResponseMessage_TableEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_secs_ = 0u;
  offset_fracs_ = GOOGLE_ULONGLONG(0);
  skew_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeResponseMessage_TableEntry::~ExchangeResponseMessage_TableEntry() {
  // @@protoc_insertion_point(destructor:freedm.broker.ExchangeResponseMessage.TableEntry)
  SharedDtor();
}

void ExchangeResponseMessage_TableEntry::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeResponseMessage_TableEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeResponseMessage_TableEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeResponseMessage_TableEntry_descriptor_;
}

const ExchangeResponseMessage_TableEntry& ExchangeResponseMessage_TableEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClockSynchronizer_2eproto();
  return *default_instance_;
}

ExchangeResponseMessage_TableEntry* ExchangeResponseMessage_TableEntry::default_instance_ = NULL;

ExchangeResponseMessage_TableEntry* ExchangeResponseMessage_TableEntry::New() const {
  return new ExchangeResponseMessage_TableEntry;
}

void ExchangeResponseMessage_TableEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExchangeResponseMessage_TableEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(offset_fracs_, offset_secs_);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeResponseMessage_TableEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.ExchangeResponseMessage.TableEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset_secs;
        break;
      }

      // required uint32 offset_secs = 2;
      case 2: {
        if (tag == 16) {
         parse_offset_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_secs_)));
          set_has_offset_secs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset_fracs;
        break;
      }

      // required uint64 offset_fracs = 3;
      case 3: {
        if (tag == 24) {
         parse_offset_fracs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_fracs_)));
          set_has_offset_fracs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_skew;
        break;
      }

      // required double skew = 4;
      case 4: {
        if (tag == 33) {
         parse_skew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &skew_)));
          set_has_skew();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_weight;
        break;
      }

      // required double weight = 5;
      case 5: {
        if (tag == 41) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.ExchangeResponseMessage.TableEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.ExchangeResponseMessage.TableEntry)
  return false;
#undef DO_
}

void ExchangeResponseMessage_TableEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.ExchangeResponseMessage.TableEntry)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required uint32 offset_secs = 2;
  if (has_offset_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset_secs(), output);
  }

  // required uint64 offset_fracs = 3;
  if (has_offset_fracs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset_fracs(), output);
  }

  // required double skew = 4;
  if (has_skew()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->skew(), output);
  }

  // required double weight = 5;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.ExchangeResponseMessage.TableEntry)
}

::google::protobuf::uint8* ExchangeResponseMessage_TableEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.ExchangeResponseMessage.TableEntry)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required uint32 offset_secs = 2;
  if (has_offset_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset_secs(), target);
  }

  // required uint64 offset_fracs = 3;
  if (has_offset_fracs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset_fracs(), target);
  }

  // required double skew = 4;
  if (has_skew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->skew(), target);
  }

  // required double weight = 5;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.ExchangeResponseMessage.TableEntry)
  return target;
}

int ExchangeResponseMessage_TableEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required uint32 offset_secs = 2;
    if (has_offset_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset_secs());
    }

    // required uint64 offset_fracs = 3;
    if (has_offset_fracs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset_fracs());
    }

    // required double skew = 4;
    if (has_skew()) {
      total_size += 1 + 8;
    }

    // required double weight = 5;
    if (has_weight()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeResponseMessage_TableEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeResponseMessage_TableEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeResponseMessage_TableEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeResponseMessage_TableEntry::MergeFrom(const ExchangeResponseMessage_TableEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_offset_secs()) {
      set_offset_secs(from.offset_secs());
    }
    if (from.has_offset_fracs()) {
      set_offset_fracs(from.offset_fracs());
    }
    if (from.has_skew()) {
      set_skew(from.skew());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeResponseMessage_TableEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeResponseMessage_TableEntry::CopyFrom(const ExchangeResponseMessage_TableEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeResponseMessage_TableEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ExchangeResponseMessage_TableEntry::Swap(ExchangeResponseMessage_TableEntry* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(offset_secs_, other->offset_secs_);
    std::swap(offset_fracs_, other->offset_fracs_);
    std::swap(skew_, other->skew_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeResponseMessage_TableEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeResponseMessage_TableEntry_descriptor_;
  metadata.reflection = ExchangeResponseMessage_TableEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ExchangeResponseMessage::kTableEntryFieldNumber;
const int ExchangeResponseMessage::kResponseFieldNumber;
const int ExchangeResponseMessage::kUnsynchronizedSendtimeFieldNumber;
#endif  // !_MSC_VER

ExchangeResponseMessage::ExchangeResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.ExchangeResponseMessage)
}

void ExchangeResponseMessage::InitAsDefaultInstance() {
}

ExchangeResponseMessage::ExchangeResponseMessage(const ExchangeResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.ExchangeResponseMessage)
}

void ExchangeResponseMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  response_ = 0u;
  unsynchronized_sendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeResponseMessage::~ExchangeResponseMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.ExchangeResponseMessage)
  SharedDtor();
}

void ExchangeResponseMessage::SharedDtor() {
  if (unsynchronized_sendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unsynchronized_sendtime_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeResponseMessage_descriptor_;
}

const ExchangeResponseMessage& ExchangeResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClockSynchronizer_2eproto();
  return *default_instance_;
}

ExchangeResponseMessage* ExchangeResponseMessage::default_instance_ = NULL;

ExchangeResponseMessage* ExchangeResponseMessage::New() const {
  return new ExchangeResponseMessage;
}

void ExchangeResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    response_ = 0u;
    if (has_unsynchronized_sendtime()) {
      if (unsynchronized_sendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unsynchronized_sendtime_->clear();
      }
    }
  }
  table_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.ExchangeResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .freedm.broker.ExchangeResponseMessage.TableEntry table_entry = 1;
      case 1: {
        if (tag == 10) {
         parse_table_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_table_entry;
        if (input->ExpectTag(16)) goto parse_response;
        break;
      }

      // required uint32 response = 2;
      case 2: {
        if (tag == 16) {
         parse_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
          set_has_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unsynchronized_sendtime;
        break;
      }

      // required string unsynchronized_sendtime = 3;
      case 3: {
        if (tag == 26) {
         parse_unsynchronized_sendtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unsynchronized_sendtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unsynchronized_sendtime().data(), this->unsynchronized_sendtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unsynchronized_sendtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.ExchangeResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.ExchangeResponseMessage)
  return false;
#undef DO_
}

void ExchangeResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.ExchangeResponseMessage)
  // repeated .freedm.broker.ExchangeResponseMessage.TableEntry table_entry = 1;
  for (int i = 0; i < this->table_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table_entry(i), output);
  }

  // required uint32 response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->response(), output);
  }

  // required string unsynchronized_sendtime = 3;
  if (has_unsynchronized_sendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unsynchronized_sendtime().data(), this->unsynchronized_sendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unsynchronized_sendtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->unsynchronized_sendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.ExchangeResponseMessage)
}

::google::protobuf::uint8* ExchangeResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.ExchangeResponseMessage)
  // repeated .freedm.broker.ExchangeResponseMessage.TableEntry table_entry = 1;
  for (int i = 0; i < this->table_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table_entry(i), target);
  }

  // required uint32 response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->response(), target);
  }

  // required string unsynchronized_sendtime = 3;
  if (has_unsynchronized_sendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unsynchronized_sendtime().data(), this->unsynchronized_sendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unsynchronized_sendtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unsynchronized_sendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.ExchangeResponseMessage)
  return target;
}

int ExchangeResponseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

    // required string unsynchronized_sendtime = 3;
    if (has_unsynchronized_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unsynchronized_sendtime());
    }

  }
  // repeated .freedm.broker.ExchangeResponseMessage.TableEntry table_entry = 1;
  total_size += 1 * this->table_entry_size();
  for (int i = 0; i < this->table_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table_entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeResponseMessage::MergeFrom(const ExchangeResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_entry_.MergeFrom(from.table_entry_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_unsynchronized_sendtime()) {
      set_unsynchronized_sendtime(from.unsynchronized_sendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeResponseMessage::CopyFrom(const ExchangeResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->table_entry())) return false;
  return true;
}

void ExchangeResponseMessage::Swap(ExchangeResponseMessage* other) {
  if (other != this) {
    table_entry_.Swap(&other->table_entry_);
    std::swap(response_, other->response_);
    std::swap(unsynchronized_sendtime_, other->unsynchronized_sendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeResponseMessage_descriptor_;
  metadata.reflection = ExchangeResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClockSynchronizerMessage::kExchangeMessageFieldNumber;
const int ClockSynchronizerMessage::kExchangeResponseMessageFieldNumber;
#endif  // !_MSC_VER

ClockSynchronizerMessage::ClockSynchronizerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:freedm.broker.ClockSynchronizerMessage)
}

void ClockSynchronizerMessage::InitAsDefaultInstance() {
  exchange_message_ = const_cast< ::freedm::broker::ExchangeMessage*>(&::freedm::broker::ExchangeMessage::default_instance());
  exchange_response_message_ = const_cast< ::freedm::broker::ExchangeResponseMessage*>(&::freedm::broker::ExchangeResponseMessage::default_instance());
}

ClockSynchronizerMessage::ClockSynchronizerMessage(const ClockSynchronizerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:freedm.broker.ClockSynchronizerMessage)
}

void ClockSynchronizerMessage::SharedCtor() {
  _cached_size_ = 0;
  exchange_message_ = NULL;
  exchange_response_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClockSynchronizerMessage::~ClockSynchronizerMessage() {
  // @@protoc_insertion_point(destructor:freedm.broker.ClockSynchronizerMessage)
  SharedDtor();
}

void ClockSynchronizerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete exchange_message_;
    delete exchange_response_message_;
  }
}

void ClockSynchronizerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClockSynchronizerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClockSynchronizerMessage_descriptor_;
}

const ClockSynchronizerMessage& ClockSynchronizerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClockSynchronizer_2eproto();
  return *default_instance_;
}

ClockSynchronizerMessage* ClockSynchronizerMessage::default_instance_ = NULL;

ClockSynchronizerMessage* ClockSynchronizerMessage::New() const {
  return new ClockSynchronizerMessage;
}

void ClockSynchronizerMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_exchange_message()) {
      if (exchange_message_ != NULL) exchange_message_->::freedm::broker::ExchangeMessage::Clear();
    }
    if (has_exchange_response_message()) {
      if (exchange_response_message_ != NULL) exchange_response_message_->::freedm::broker::ExchangeResponseMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClockSynchronizerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:freedm.broker.ClockSynchronizerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .freedm.broker.ExchangeMessage exchange_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchange_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange_response_message;
        break;
      }

      // optional .freedm.broker.ExchangeResponseMessage exchange_response_message = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange_response_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchange_response_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:freedm.broker.ClockSynchronizerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:freedm.broker.ClockSynchronizerMessage)
  return false;
#undef DO_
}

void ClockSynchronizerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:freedm.broker.ClockSynchronizerMessage)
  // optional .freedm.broker.ExchangeMessage exchange_message = 1;
  if (has_exchange_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exchange_message(), output);
  }

  // optional .freedm.broker.ExchangeResponseMessage exchange_response_message = 2;
  if (has_exchange_response_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exchange_response_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:freedm.broker.ClockSynchronizerMessage)
}

::google::protobuf::uint8* ClockSynchronizerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:freedm.broker.ClockSynchronizerMessage)
  // optional .freedm.broker.ExchangeMessage exchange_message = 1;
  if (has_exchange_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exchange_message(), target);
  }

  // optional .freedm.broker.ExchangeResponseMessage exchange_response_message = 2;
  if (has_exchange_response_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exchange_response_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:freedm.broker.ClockSynchronizerMessage)
  return target;
}

int ClockSynchronizerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .freedm.broker.ExchangeMessage exchange_message = 1;
    if (has_exchange_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchange_message());
    }

    // optional .freedm.broker.ExchangeResponseMessage exchange_response_message = 2;
    if (has_exchange_response_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchange_response_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClockSynchronizerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClockSynchronizerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClockSynchronizerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClockSynchronizerMessage::MergeFrom(const ClockSynchronizerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_message()) {
      mutable_exchange_message()->::freedm::broker::ExchangeMessage::MergeFrom(from.exchange_message());
    }
    if (from.has_exchange_response_message()) {
      mutable_exchange_response_message()->::freedm::broker::ExchangeResponseMessage::MergeFrom(from.exchange_response_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClockSynchronizerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClockSynchronizerMessage::CopyFrom(const ClockSynchronizerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClockSynchronizerMessage::IsInitialized() const {

  if (has_exchange_message()) {
    if (!this->exchange_message().IsInitialized()) return false;
  }
  if (has_exchange_response_message()) {
    if (!this->exchange_response_message().IsInitialized()) return false;
  }
  return true;
}

void ClockSynchronizerMessage::Swap(ClockSynchronizerMessage* other) {
  if (other != this) {
    std::swap(exchange_message_, other->exchange_message_);
    std::swap(exchange_response_message_, other->exchange_response_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClockSynchronizerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClockSynchronizerMessage_descriptor_;
  metadata.reflection = ClockSynchronizerMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace broker
}  // namespace freedm

// @@protoc_insertion_point(global_scope)
