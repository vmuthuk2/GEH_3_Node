// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClockSynchronizer.proto

#ifndef PROTOBUF_ClockSynchronizer_2eproto__INCLUDED
#define PROTOBUF_ClockSynchronizer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace freedm {
namespace broker {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClockSynchronizer_2eproto();
void protobuf_AssignDesc_ClockSynchronizer_2eproto();
void protobuf_ShutdownFile_ClockSynchronizer_2eproto();

class ExchangeMessage;
class ExchangeResponseMessage;
class ExchangeResponseMessage_TableEntry;
class ClockSynchronizerMessage;

// ===================================================================

class ExchangeMessage : public ::google::protobuf::Message {
 public:
  ExchangeMessage();
  virtual ~ExchangeMessage();

  ExchangeMessage(const ExchangeMessage& from);

  inline ExchangeMessage& operator=(const ExchangeMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeMessage& default_instance();

  void Swap(ExchangeMessage* other);

  // implements Message ----------------------------------------------

  ExchangeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeMessage& from);
  void MergeFrom(const ExchangeMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline ::google::protobuf::uint32 query() const;
  inline void set_query(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:freedm.broker.ExchangeMessage)
 private:
  inline void set_has_query();
  inline void clear_has_query();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 query_;
  friend void  protobuf_AddDesc_ClockSynchronizer_2eproto();
  friend void protobuf_AssignDesc_ClockSynchronizer_2eproto();
  friend void protobuf_ShutdownFile_ClockSynchronizer_2eproto();

  void InitAsDefaultInstance();
  static ExchangeMessage* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeResponseMessage_TableEntry : public ::google::protobuf::Message {
 public:
  ExchangeResponseMessage_TableEntry();
  virtual ~ExchangeResponseMessage_TableEntry();

  ExchangeResponseMessage_TableEntry(const ExchangeResponseMessage_TableEntry& from);

  inline ExchangeResponseMessage_TableEntry& operator=(const ExchangeResponseMessage_TableEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeResponseMessage_TableEntry& default_instance();

  void Swap(ExchangeResponseMessage_TableEntry* other);

  // implements Message ----------------------------------------------

  ExchangeResponseMessage_TableEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeResponseMessage_TableEntry& from);
  void MergeFrom(const ExchangeResponseMessage_TableEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required uint32 offset_secs = 2;
  inline bool has_offset_secs() const;
  inline void clear_offset_secs();
  static const int kOffsetSecsFieldNumber = 2;
  inline ::google::protobuf::uint32 offset_secs() const;
  inline void set_offset_secs(::google::protobuf::uint32 value);

  // required uint64 offset_fracs = 3;
  inline bool has_offset_fracs() const;
  inline void clear_offset_fracs();
  static const int kOffsetFracsFieldNumber = 3;
  inline ::google::protobuf::uint64 offset_fracs() const;
  inline void set_offset_fracs(::google::protobuf::uint64 value);

  // required double skew = 4;
  inline bool has_skew() const;
  inline void clear_skew();
  static const int kSkewFieldNumber = 4;
  inline double skew() const;
  inline void set_skew(double value);

  // required double weight = 5;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 5;
  inline double weight() const;
  inline void set_weight(double value);

  // @@protoc_insertion_point(class_scope:freedm.broker.ExchangeResponseMessage.TableEntry)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_offset_secs();
  inline void clear_has_offset_secs();
  inline void set_has_offset_fracs();
  inline void clear_has_offset_fracs();
  inline void set_has_skew();
  inline void clear_has_skew();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::google::protobuf::uint64 offset_fracs_;
  double skew_;
  double weight_;
  ::google::protobuf::uint32 offset_secs_;
  friend void  protobuf_AddDesc_ClockSynchronizer_2eproto();
  friend void protobuf_AssignDesc_ClockSynchronizer_2eproto();
  friend void protobuf_ShutdownFile_ClockSynchronizer_2eproto();

  void InitAsDefaultInstance();
  static ExchangeResponseMessage_TableEntry* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeResponseMessage : public ::google::protobuf::Message {
 public:
  ExchangeResponseMessage();
  virtual ~ExchangeResponseMessage();

  ExchangeResponseMessage(const ExchangeResponseMessage& from);

  inline ExchangeResponseMessage& operator=(const ExchangeResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeResponseMessage& default_instance();

  void Swap(ExchangeResponseMessage* other);

  // implements Message ----------------------------------------------

  ExchangeResponseMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeResponseMessage& from);
  void MergeFrom(const ExchangeResponseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExchangeResponseMessage_TableEntry TableEntry;

  // accessors -------------------------------------------------------

  // repeated .freedm.broker.ExchangeResponseMessage.TableEntry table_entry = 1;
  inline int table_entry_size() const;
  inline void clear_table_entry();
  static const int kTableEntryFieldNumber = 1;
  inline const ::freedm::broker::ExchangeResponseMessage_TableEntry& table_entry(int index) const;
  inline ::freedm::broker::ExchangeResponseMessage_TableEntry* mutable_table_entry(int index);
  inline ::freedm::broker::ExchangeResponseMessage_TableEntry* add_table_entry();
  inline const ::google::protobuf::RepeatedPtrField< ::freedm::broker::ExchangeResponseMessage_TableEntry >&
      table_entry() const;
  inline ::google::protobuf::RepeatedPtrField< ::freedm::broker::ExchangeResponseMessage_TableEntry >*
      mutable_table_entry();

  // required uint32 response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline ::google::protobuf::uint32 response() const;
  inline void set_response(::google::protobuf::uint32 value);

  // required string unsynchronized_sendtime = 3;
  inline bool has_unsynchronized_sendtime() const;
  inline void clear_unsynchronized_sendtime();
  static const int kUnsynchronizedSendtimeFieldNumber = 3;
  inline const ::std::string& unsynchronized_sendtime() const;
  inline void set_unsynchronized_sendtime(const ::std::string& value);
  inline void set_unsynchronized_sendtime(const char* value);
  inline void set_unsynchronized_sendtime(const char* value, size_t size);
  inline ::std::string* mutable_unsynchronized_sendtime();
  inline ::std::string* release_unsynchronized_sendtime();
  inline void set_allocated_unsynchronized_sendtime(::std::string* unsynchronized_sendtime);

  // @@protoc_insertion_point(class_scope:freedm.broker.ExchangeResponseMessage)
 private:
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_unsynchronized_sendtime();
  inline void clear_has_unsynchronized_sendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::freedm::broker::ExchangeResponseMessage_TableEntry > table_entry_;
  ::std::string* unsynchronized_sendtime_;
  ::google::protobuf::uint32 response_;
  friend void  protobuf_AddDesc_ClockSynchronizer_2eproto();
  friend void protobuf_AssignDesc_ClockSynchronizer_2eproto();
  friend void protobuf_ShutdownFile_ClockSynchronizer_2eproto();

  void InitAsDefaultInstance();
  static ExchangeResponseMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClockSynchronizerMessage : public ::google::protobuf::Message {
 public:
  ClockSynchronizerMessage();
  virtual ~ClockSynchronizerMessage();

  ClockSynchronizerMessage(const ClockSynchronizerMessage& from);

  inline ClockSynchronizerMessage& operator=(const ClockSynchronizerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClockSynchronizerMessage& default_instance();

  void Swap(ClockSynchronizerMessage* other);

  // implements Message ----------------------------------------------

  ClockSynchronizerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClockSynchronizerMessage& from);
  void MergeFrom(const ClockSynchronizerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .freedm.broker.ExchangeMessage exchange_message = 1;
  inline bool has_exchange_message() const;
  inline void clear_exchange_message();
  static const int kExchangeMessageFieldNumber = 1;
  inline const ::freedm::broker::ExchangeMessage& exchange_message() const;
  inline ::freedm::broker::ExchangeMessage* mutable_exchange_message();
  inline ::freedm::broker::ExchangeMessage* release_exchange_message();
  inline void set_allocated_exchange_message(::freedm::broker::ExchangeMessage* exchange_message);

  // optional .freedm.broker.ExchangeResponseMessage exchange_response_message = 2;
  inline bool has_exchange_response_message() const;
  inline void clear_exchange_response_message();
  static const int kExchangeResponseMessageFieldNumber = 2;
  inline const ::freedm::broker::ExchangeResponseMessage& exchange_response_message() const;
  inline ::freedm::broker::ExchangeResponseMessage* mutable_exchange_response_message();
  inline ::freedm::broker::ExchangeResponseMessage* release_exchange_response_message();
  inline void set_allocated_exchange_response_message(::freedm::broker::ExchangeResponseMessage* exchange_response_message);

  // @@protoc_insertion_point(class_scope:freedm.broker.ClockSynchronizerMessage)
 private:
  inline void set_has_exchange_message();
  inline void clear_has_exchange_message();
  inline void set_has_exchange_response_message();
  inline void clear_has_exchange_response_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::freedm::broker::ExchangeMessage* exchange_message_;
  ::freedm::broker::ExchangeResponseMessage* exchange_response_message_;
  friend void  protobuf_AddDesc_ClockSynchronizer_2eproto();
  friend void protobuf_AssignDesc_ClockSynchronizer_2eproto();
  friend void protobuf_ShutdownFile_ClockSynchronizer_2eproto();

  void InitAsDefaultInstance();
  static ClockSynchronizerMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ExchangeMessage

// required uint32 query = 1;
inline bool ExchangeMessage::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeMessage::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeMessage::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeMessage::clear_query() {
  query_ = 0u;
  clear_has_query();
}
inline ::google::protobuf::uint32 ExchangeMessage::query() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeMessage.query)
  return query_;
}
inline void ExchangeMessage::set_query(::google::protobuf::uint32 value) {
  set_has_query();
  query_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.ExchangeMessage.query)
}

// -------------------------------------------------------------------

// ExchangeResponseMessage_TableEntry

// required string uuid = 1;
inline bool ExchangeResponseMessage_TableEntry::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeResponseMessage_TableEntry::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeResponseMessage_TableEntry::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeResponseMessage_TableEntry::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ExchangeResponseMessage_TableEntry::uuid() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeResponseMessage.TableEntry.uuid)
  return *uuid_;
}
inline void ExchangeResponseMessage_TableEntry::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.ExchangeResponseMessage.TableEntry.uuid)
}
inline void ExchangeResponseMessage_TableEntry::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.ExchangeResponseMessage.TableEntry.uuid)
}
inline void ExchangeResponseMessage_TableEntry::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.ExchangeResponseMessage.TableEntry.uuid)
}
inline ::std::string* ExchangeResponseMessage_TableEntry::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.ExchangeResponseMessage.TableEntry.uuid)
  return uuid_;
}
inline ::std::string* ExchangeResponseMessage_TableEntry::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExchangeResponseMessage_TableEntry::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ExchangeResponseMessage.TableEntry.uuid)
}

// required uint32 offset_secs = 2;
inline bool ExchangeResponseMessage_TableEntry::has_offset_secs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeResponseMessage_TableEntry::set_has_offset_secs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeResponseMessage_TableEntry::clear_has_offset_secs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeResponseMessage_TableEntry::clear_offset_secs() {
  offset_secs_ = 0u;
  clear_has_offset_secs();
}
inline ::google::protobuf::uint32 ExchangeResponseMessage_TableEntry::offset_secs() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeResponseMessage.TableEntry.offset_secs)
  return offset_secs_;
}
inline void ExchangeResponseMessage_TableEntry::set_offset_secs(::google::protobuf::uint32 value) {
  set_has_offset_secs();
  offset_secs_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.ExchangeResponseMessage.TableEntry.offset_secs)
}

// required uint64 offset_fracs = 3;
inline bool ExchangeResponseMessage_TableEntry::has_offset_fracs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeResponseMessage_TableEntry::set_has_offset_fracs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeResponseMessage_TableEntry::clear_has_offset_fracs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeResponseMessage_TableEntry::clear_offset_fracs() {
  offset_fracs_ = GOOGLE_ULONGLONG(0);
  clear_has_offset_fracs();
}
inline ::google::protobuf::uint64 ExchangeResponseMessage_TableEntry::offset_fracs() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeResponseMessage.TableEntry.offset_fracs)
  return offset_fracs_;
}
inline void ExchangeResponseMessage_TableEntry::set_offset_fracs(::google::protobuf::uint64 value) {
  set_has_offset_fracs();
  offset_fracs_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.ExchangeResponseMessage.TableEntry.offset_fracs)
}

// required double skew = 4;
inline bool ExchangeResponseMessage_TableEntry::has_skew() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExchangeResponseMessage_TableEntry::set_has_skew() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExchangeResponseMessage_TableEntry::clear_has_skew() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExchangeResponseMessage_TableEntry::clear_skew() {
  skew_ = 0;
  clear_has_skew();
}
inline double ExchangeResponseMessage_TableEntry::skew() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeResponseMessage.TableEntry.skew)
  return skew_;
}
inline void ExchangeResponseMessage_TableEntry::set_skew(double value) {
  set_has_skew();
  skew_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.ExchangeResponseMessage.TableEntry.skew)
}

// required double weight = 5;
inline bool ExchangeResponseMessage_TableEntry::has_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExchangeResponseMessage_TableEntry::set_has_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExchangeResponseMessage_TableEntry::clear_has_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExchangeResponseMessage_TableEntry::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline double ExchangeResponseMessage_TableEntry::weight() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeResponseMessage.TableEntry.weight)
  return weight_;
}
inline void ExchangeResponseMessage_TableEntry::set_weight(double value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.ExchangeResponseMessage.TableEntry.weight)
}

// -------------------------------------------------------------------

// ExchangeResponseMessage

// repeated .freedm.broker.ExchangeResponseMessage.TableEntry table_entry = 1;
inline int ExchangeResponseMessage::table_entry_size() const {
  return table_entry_.size();
}
inline void ExchangeResponseMessage::clear_table_entry() {
  table_entry_.Clear();
}
inline const ::freedm::broker::ExchangeResponseMessage_TableEntry& ExchangeResponseMessage::table_entry(int index) const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeResponseMessage.table_entry)
  return table_entry_.Get(index);
}
inline ::freedm::broker::ExchangeResponseMessage_TableEntry* ExchangeResponseMessage::mutable_table_entry(int index) {
  // @@protoc_insertion_point(field_mutable:freedm.broker.ExchangeResponseMessage.table_entry)
  return table_entry_.Mutable(index);
}
inline ::freedm::broker::ExchangeResponseMessage_TableEntry* ExchangeResponseMessage::add_table_entry() {
  // @@protoc_insertion_point(field_add:freedm.broker.ExchangeResponseMessage.table_entry)
  return table_entry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::freedm::broker::ExchangeResponseMessage_TableEntry >&
ExchangeResponseMessage::table_entry() const {
  // @@protoc_insertion_point(field_list:freedm.broker.ExchangeResponseMessage.table_entry)
  return table_entry_;
}
inline ::google::protobuf::RepeatedPtrField< ::freedm::broker::ExchangeResponseMessage_TableEntry >*
ExchangeResponseMessage::mutable_table_entry() {
  // @@protoc_insertion_point(field_mutable_list:freedm.broker.ExchangeResponseMessage.table_entry)
  return &table_entry_;
}

// required uint32 response = 2;
inline bool ExchangeResponseMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeResponseMessage::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeResponseMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeResponseMessage::clear_response() {
  response_ = 0u;
  clear_has_response();
}
inline ::google::protobuf::uint32 ExchangeResponseMessage::response() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeResponseMessage.response)
  return response_;
}
inline void ExchangeResponseMessage::set_response(::google::protobuf::uint32 value) {
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.ExchangeResponseMessage.response)
}

// required string unsynchronized_sendtime = 3;
inline bool ExchangeResponseMessage::has_unsynchronized_sendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeResponseMessage::set_has_unsynchronized_sendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeResponseMessage::clear_has_unsynchronized_sendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeResponseMessage::clear_unsynchronized_sendtime() {
  if (unsynchronized_sendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unsynchronized_sendtime_->clear();
  }
  clear_has_unsynchronized_sendtime();
}
inline const ::std::string& ExchangeResponseMessage::unsynchronized_sendtime() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ExchangeResponseMessage.unsynchronized_sendtime)
  return *unsynchronized_sendtime_;
}
inline void ExchangeResponseMessage::set_unsynchronized_sendtime(const ::std::string& value) {
  set_has_unsynchronized_sendtime();
  if (unsynchronized_sendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unsynchronized_sendtime_ = new ::std::string;
  }
  unsynchronized_sendtime_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.ExchangeResponseMessage.unsynchronized_sendtime)
}
inline void ExchangeResponseMessage::set_unsynchronized_sendtime(const char* value) {
  set_has_unsynchronized_sendtime();
  if (unsynchronized_sendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unsynchronized_sendtime_ = new ::std::string;
  }
  unsynchronized_sendtime_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.ExchangeResponseMessage.unsynchronized_sendtime)
}
inline void ExchangeResponseMessage::set_unsynchronized_sendtime(const char* value, size_t size) {
  set_has_unsynchronized_sendtime();
  if (unsynchronized_sendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unsynchronized_sendtime_ = new ::std::string;
  }
  unsynchronized_sendtime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.ExchangeResponseMessage.unsynchronized_sendtime)
}
inline ::std::string* ExchangeResponseMessage::mutable_unsynchronized_sendtime() {
  set_has_unsynchronized_sendtime();
  if (unsynchronized_sendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unsynchronized_sendtime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.ExchangeResponseMessage.unsynchronized_sendtime)
  return unsynchronized_sendtime_;
}
inline ::std::string* ExchangeResponseMessage::release_unsynchronized_sendtime() {
  clear_has_unsynchronized_sendtime();
  if (unsynchronized_sendtime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unsynchronized_sendtime_;
    unsynchronized_sendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExchangeResponseMessage::set_allocated_unsynchronized_sendtime(::std::string* unsynchronized_sendtime) {
  if (unsynchronized_sendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unsynchronized_sendtime_;
  }
  if (unsynchronized_sendtime) {
    set_has_unsynchronized_sendtime();
    unsynchronized_sendtime_ = unsynchronized_sendtime;
  } else {
    clear_has_unsynchronized_sendtime();
    unsynchronized_sendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ExchangeResponseMessage.unsynchronized_sendtime)
}

// -------------------------------------------------------------------

// ClockSynchronizerMessage

// optional .freedm.broker.ExchangeMessage exchange_message = 1;
inline bool ClockSynchronizerMessage::has_exchange_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClockSynchronizerMessage::set_has_exchange_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClockSynchronizerMessage::clear_has_exchange_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClockSynchronizerMessage::clear_exchange_message() {
  if (exchange_message_ != NULL) exchange_message_->::freedm::broker::ExchangeMessage::Clear();
  clear_has_exchange_message();
}
inline const ::freedm::broker::ExchangeMessage& ClockSynchronizerMessage::exchange_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ClockSynchronizerMessage.exchange_message)
  return exchange_message_ != NULL ? *exchange_message_ : *default_instance_->exchange_message_;
}
inline ::freedm::broker::ExchangeMessage* ClockSynchronizerMessage::mutable_exchange_message() {
  set_has_exchange_message();
  if (exchange_message_ == NULL) exchange_message_ = new ::freedm::broker::ExchangeMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.ClockSynchronizerMessage.exchange_message)
  return exchange_message_;
}
inline ::freedm::broker::ExchangeMessage* ClockSynchronizerMessage::release_exchange_message() {
  clear_has_exchange_message();
  ::freedm::broker::ExchangeMessage* temp = exchange_message_;
  exchange_message_ = NULL;
  return temp;
}
inline void ClockSynchronizerMessage::set_allocated_exchange_message(::freedm::broker::ExchangeMessage* exchange_message) {
  delete exchange_message_;
  exchange_message_ = exchange_message;
  if (exchange_message) {
    set_has_exchange_message();
  } else {
    clear_has_exchange_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ClockSynchronizerMessage.exchange_message)
}

// optional .freedm.broker.ExchangeResponseMessage exchange_response_message = 2;
inline bool ClockSynchronizerMessage::has_exchange_response_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClockSynchronizerMessage::set_has_exchange_response_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClockSynchronizerMessage::clear_has_exchange_response_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClockSynchronizerMessage::clear_exchange_response_message() {
  if (exchange_response_message_ != NULL) exchange_response_message_->::freedm::broker::ExchangeResponseMessage::Clear();
  clear_has_exchange_response_message();
}
inline const ::freedm::broker::ExchangeResponseMessage& ClockSynchronizerMessage::exchange_response_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.ClockSynchronizerMessage.exchange_response_message)
  return exchange_response_message_ != NULL ? *exchange_response_message_ : *default_instance_->exchange_response_message_;
}
inline ::freedm::broker::ExchangeResponseMessage* ClockSynchronizerMessage::mutable_exchange_response_message() {
  set_has_exchange_response_message();
  if (exchange_response_message_ == NULL) exchange_response_message_ = new ::freedm::broker::ExchangeResponseMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.ClockSynchronizerMessage.exchange_response_message)
  return exchange_response_message_;
}
inline ::freedm::broker::ExchangeResponseMessage* ClockSynchronizerMessage::release_exchange_response_message() {
  clear_has_exchange_response_message();
  ::freedm::broker::ExchangeResponseMessage* temp = exchange_response_message_;
  exchange_response_message_ = NULL;
  return temp;
}
inline void ClockSynchronizerMessage::set_allocated_exchange_response_message(::freedm::broker::ExchangeResponseMessage* exchange_response_message) {
  delete exchange_response_message_;
  exchange_response_message_ = exchange_response_message;
  if (exchange_response_message) {
    set_has_exchange_response_message();
  } else {
    clear_has_exchange_response_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.ClockSynchronizerMessage.exchange_response_message)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace broker
}  // namespace freedm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClockSynchronizer_2eproto__INCLUDED
