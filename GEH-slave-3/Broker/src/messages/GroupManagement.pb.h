// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupManagement.proto

#ifndef PROTOBUF_GroupManagement_2eproto__INCLUDED
#define PROTOBUF_GroupManagement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace freedm {
namespace broker {
namespace gm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GroupManagement_2eproto();
void protobuf_AssignDesc_GroupManagement_2eproto();
void protobuf_ShutdownFile_GroupManagement_2eproto();

class FidStateMessage;
class AreYouCoordinatorMessage;
class InviteMessage;
class AreYouCoordinatorResponseMessage;
class AreYouThereResponseMessage;
class AcceptMessage;
class AreYouThereMessage;
class PeerListQueryMessage;
class ConnectedPeerMessage;
class PeerListMessage;
class GroupManagementMessage;

// ===================================================================

class FidStateMessage : public ::google::protobuf::Message {
 public:
  FidStateMessage();
  virtual ~FidStateMessage();

  FidStateMessage(const FidStateMessage& from);

  inline FidStateMessage& operator=(const FidStateMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FidStateMessage& default_instance();

  void Swap(FidStateMessage* other);

  // implements Message ----------------------------------------------

  FidStateMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FidStateMessage& from);
  void MergeFrom(const FidStateMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string deviceid = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // required bool state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline bool state() const;
  inline void set_state(bool value);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.FidStateMessage)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* deviceid_;
  bool state_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static FidStateMessage* default_instance_;
};
// -------------------------------------------------------------------

class AreYouCoordinatorMessage : public ::google::protobuf::Message {
 public:
  AreYouCoordinatorMessage();
  virtual ~AreYouCoordinatorMessage();

  AreYouCoordinatorMessage(const AreYouCoordinatorMessage& from);

  inline AreYouCoordinatorMessage& operator=(const AreYouCoordinatorMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AreYouCoordinatorMessage& default_instance();

  void Swap(AreYouCoordinatorMessage* other);

  // implements Message ----------------------------------------------

  AreYouCoordinatorMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AreYouCoordinatorMessage& from);
  void MergeFrom(const AreYouCoordinatorMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sequence_no = 1;
  inline bool has_sequence_no() const;
  inline void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 1;
  inline ::google::protobuf::uint32 sequence_no() const;
  inline void set_sequence_no(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.AreYouCoordinatorMessage)
 private:
  inline void set_has_sequence_no();
  inline void clear_has_sequence_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sequence_no_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static AreYouCoordinatorMessage* default_instance_;
};
// -------------------------------------------------------------------

class InviteMessage : public ::google::protobuf::Message {
 public:
  InviteMessage();
  virtual ~InviteMessage();

  InviteMessage(const InviteMessage& from);

  inline InviteMessage& operator=(const InviteMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteMessage& default_instance();

  void Swap(InviteMessage* other);

  // implements Message ----------------------------------------------

  InviteMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteMessage& from);
  void MergeFrom(const InviteMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required string group_leader_uuid = 2;
  inline bool has_group_leader_uuid() const;
  inline void clear_group_leader_uuid();
  static const int kGroupLeaderUuidFieldNumber = 2;
  inline const ::std::string& group_leader_uuid() const;
  inline void set_group_leader_uuid(const ::std::string& value);
  inline void set_group_leader_uuid(const char* value);
  inline void set_group_leader_uuid(const char* value, size_t size);
  inline ::std::string* mutable_group_leader_uuid();
  inline ::std::string* release_group_leader_uuid();
  inline void set_allocated_group_leader_uuid(::std::string* group_leader_uuid);

  // required string group_leader_host = 3;
  inline bool has_group_leader_host() const;
  inline void clear_group_leader_host();
  static const int kGroupLeaderHostFieldNumber = 3;
  inline const ::std::string& group_leader_host() const;
  inline void set_group_leader_host(const ::std::string& value);
  inline void set_group_leader_host(const char* value);
  inline void set_group_leader_host(const char* value, size_t size);
  inline ::std::string* mutable_group_leader_host();
  inline ::std::string* release_group_leader_host();
  inline void set_allocated_group_leader_host(::std::string* group_leader_host);

  // required string group_leader_port = 4;
  inline bool has_group_leader_port() const;
  inline void clear_group_leader_port();
  static const int kGroupLeaderPortFieldNumber = 4;
  inline const ::std::string& group_leader_port() const;
  inline void set_group_leader_port(const ::std::string& value);
  inline void set_group_leader_port(const char* value);
  inline void set_group_leader_port(const char* value, size_t size);
  inline ::std::string* mutable_group_leader_port();
  inline ::std::string* release_group_leader_port();
  inline void set_allocated_group_leader_port(::std::string* group_leader_port);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.InviteMessage)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_group_leader_uuid();
  inline void clear_has_group_leader_uuid();
  inline void set_has_group_leader_host();
  inline void clear_has_group_leader_host();
  inline void set_has_group_leader_port();
  inline void clear_has_group_leader_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* group_leader_uuid_;
  ::std::string* group_leader_host_;
  ::std::string* group_leader_port_;
  ::google::protobuf::uint32 group_id_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static InviteMessage* default_instance_;
};
// -------------------------------------------------------------------

class AreYouCoordinatorResponseMessage : public ::google::protobuf::Message {
 public:
  AreYouCoordinatorResponseMessage();
  virtual ~AreYouCoordinatorResponseMessage();

  AreYouCoordinatorResponseMessage(const AreYouCoordinatorResponseMessage& from);

  inline AreYouCoordinatorResponseMessage& operator=(const AreYouCoordinatorResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AreYouCoordinatorResponseMessage& default_instance();

  void Swap(AreYouCoordinatorResponseMessage* other);

  // implements Message ----------------------------------------------

  AreYouCoordinatorResponseMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AreYouCoordinatorResponseMessage& from);
  void MergeFrom(const AreYouCoordinatorResponseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string payload = 1;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 1;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // required string leader_uuid = 2;
  inline bool has_leader_uuid() const;
  inline void clear_leader_uuid();
  static const int kLeaderUuidFieldNumber = 2;
  inline const ::std::string& leader_uuid() const;
  inline void set_leader_uuid(const ::std::string& value);
  inline void set_leader_uuid(const char* value);
  inline void set_leader_uuid(const char* value, size_t size);
  inline ::std::string* mutable_leader_uuid();
  inline ::std::string* release_leader_uuid();
  inline void set_allocated_leader_uuid(::std::string* leader_uuid);

  // required string leader_host = 3;
  inline bool has_leader_host() const;
  inline void clear_leader_host();
  static const int kLeaderHostFieldNumber = 3;
  inline const ::std::string& leader_host() const;
  inline void set_leader_host(const ::std::string& value);
  inline void set_leader_host(const char* value);
  inline void set_leader_host(const char* value, size_t size);
  inline ::std::string* mutable_leader_host();
  inline ::std::string* release_leader_host();
  inline void set_allocated_leader_host(::std::string* leader_host);

  // required string leader_port = 4;
  inline bool has_leader_port() const;
  inline void clear_leader_port();
  static const int kLeaderPortFieldNumber = 4;
  inline const ::std::string& leader_port() const;
  inline void set_leader_port(const ::std::string& value);
  inline void set_leader_port(const char* value);
  inline void set_leader_port(const char* value, size_t size);
  inline ::std::string* mutable_leader_port();
  inline ::std::string* release_leader_port();
  inline void set_allocated_leader_port(::std::string* leader_port);

  // required uint32 sequence_no = 5;
  inline bool has_sequence_no() const;
  inline void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 5;
  inline ::google::protobuf::uint32 sequence_no() const;
  inline void set_sequence_no(::google::protobuf::uint32 value);

  // repeated .freedm.broker.gm.FidStateMessage fid_state = 6;
  inline int fid_state_size() const;
  inline void clear_fid_state();
  static const int kFidStateFieldNumber = 6;
  inline const ::freedm::broker::gm::FidStateMessage& fid_state(int index) const;
  inline ::freedm::broker::gm::FidStateMessage* mutable_fid_state(int index);
  inline ::freedm::broker::gm::FidStateMessage* add_fid_state();
  inline const ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::FidStateMessage >&
      fid_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::FidStateMessage >*
      mutable_fid_state();

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.AreYouCoordinatorResponseMessage)
 private:
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_leader_uuid();
  inline void clear_has_leader_uuid();
  inline void set_has_leader_host();
  inline void clear_has_leader_host();
  inline void set_has_leader_port();
  inline void clear_has_leader_port();
  inline void set_has_sequence_no();
  inline void clear_has_sequence_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* payload_;
  ::std::string* leader_uuid_;
  ::std::string* leader_host_;
  ::std::string* leader_port_;
  ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::FidStateMessage > fid_state_;
  ::google::protobuf::uint32 sequence_no_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static AreYouCoordinatorResponseMessage* default_instance_;
};
// -------------------------------------------------------------------

class AreYouThereResponseMessage : public ::google::protobuf::Message {
 public:
  AreYouThereResponseMessage();
  virtual ~AreYouThereResponseMessage();

  AreYouThereResponseMessage(const AreYouThereResponseMessage& from);

  inline AreYouThereResponseMessage& operator=(const AreYouThereResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AreYouThereResponseMessage& default_instance();

  void Swap(AreYouThereResponseMessage* other);

  // implements Message ----------------------------------------------

  AreYouThereResponseMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AreYouThereResponseMessage& from);
  void MergeFrom(const AreYouThereResponseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string payload = 1;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 1;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // required string leader_uuid = 2;
  inline bool has_leader_uuid() const;
  inline void clear_leader_uuid();
  static const int kLeaderUuidFieldNumber = 2;
  inline const ::std::string& leader_uuid() const;
  inline void set_leader_uuid(const ::std::string& value);
  inline void set_leader_uuid(const char* value);
  inline void set_leader_uuid(const char* value, size_t size);
  inline ::std::string* mutable_leader_uuid();
  inline ::std::string* release_leader_uuid();
  inline void set_allocated_leader_uuid(::std::string* leader_uuid);

  // required string leader_host = 3;
  inline bool has_leader_host() const;
  inline void clear_leader_host();
  static const int kLeaderHostFieldNumber = 3;
  inline const ::std::string& leader_host() const;
  inline void set_leader_host(const ::std::string& value);
  inline void set_leader_host(const char* value);
  inline void set_leader_host(const char* value, size_t size);
  inline ::std::string* mutable_leader_host();
  inline ::std::string* release_leader_host();
  inline void set_allocated_leader_host(::std::string* leader_host);

  // required string leader_port = 4;
  inline bool has_leader_port() const;
  inline void clear_leader_port();
  static const int kLeaderPortFieldNumber = 4;
  inline const ::std::string& leader_port() const;
  inline void set_leader_port(const ::std::string& value);
  inline void set_leader_port(const char* value);
  inline void set_leader_port(const char* value, size_t size);
  inline ::std::string* mutable_leader_port();
  inline ::std::string* release_leader_port();
  inline void set_allocated_leader_port(::std::string* leader_port);

  // required uint32 sequence_no = 5;
  inline bool has_sequence_no() const;
  inline void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 5;
  inline ::google::protobuf::uint32 sequence_no() const;
  inline void set_sequence_no(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.AreYouThereResponseMessage)
 private:
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_leader_uuid();
  inline void clear_has_leader_uuid();
  inline void set_has_leader_host();
  inline void clear_has_leader_host();
  inline void set_has_leader_port();
  inline void clear_has_leader_port();
  inline void set_has_sequence_no();
  inline void clear_has_sequence_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* payload_;
  ::std::string* leader_uuid_;
  ::std::string* leader_host_;
  ::std::string* leader_port_;
  ::google::protobuf::uint32 sequence_no_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static AreYouThereResponseMessage* default_instance_;
};
// -------------------------------------------------------------------

class AcceptMessage : public ::google::protobuf::Message {
 public:
  AcceptMessage();
  virtual ~AcceptMessage();

  AcceptMessage(const AcceptMessage& from);

  inline AcceptMessage& operator=(const AcceptMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptMessage& default_instance();

  void Swap(AcceptMessage* other);

  // implements Message ----------------------------------------------

  AcceptMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptMessage& from);
  void MergeFrom(const AcceptMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.AcceptMessage)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 group_id_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static AcceptMessage* default_instance_;
};
// -------------------------------------------------------------------

class AreYouThereMessage : public ::google::protobuf::Message {
 public:
  AreYouThereMessage();
  virtual ~AreYouThereMessage();

  AreYouThereMessage(const AreYouThereMessage& from);

  inline AreYouThereMessage& operator=(const AreYouThereMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AreYouThereMessage& default_instance();

  void Swap(AreYouThereMessage* other);

  // implements Message ----------------------------------------------

  AreYouThereMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AreYouThereMessage& from);
  void MergeFrom(const AreYouThereMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 group_id = 1;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  inline ::google::protobuf::uint32 group_id() const;
  inline void set_group_id(::google::protobuf::uint32 value);

  // required uint32 sequence_no = 2;
  inline bool has_sequence_no() const;
  inline void clear_sequence_no();
  static const int kSequenceNoFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence_no() const;
  inline void set_sequence_no(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.AreYouThereMessage)
 private:
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_sequence_no();
  inline void clear_has_sequence_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 sequence_no_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static AreYouThereMessage* default_instance_;
};
// -------------------------------------------------------------------

class PeerListQueryMessage : public ::google::protobuf::Message {
 public:
  PeerListQueryMessage();
  virtual ~PeerListQueryMessage();

  PeerListQueryMessage(const PeerListQueryMessage& from);

  inline PeerListQueryMessage& operator=(const PeerListQueryMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerListQueryMessage& default_instance();

  void Swap(PeerListQueryMessage* other);

  // implements Message ----------------------------------------------

  PeerListQueryMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerListQueryMessage& from);
  void MergeFrom(const PeerListQueryMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string requester = 1;
  inline bool has_requester() const;
  inline void clear_requester();
  static const int kRequesterFieldNumber = 1;
  inline const ::std::string& requester() const;
  inline void set_requester(const ::std::string& value);
  inline void set_requester(const char* value);
  inline void set_requester(const char* value, size_t size);
  inline ::std::string* mutable_requester();
  inline ::std::string* release_requester();
  inline void set_allocated_requester(::std::string* requester);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.PeerListQueryMessage)
 private:
  inline void set_has_requester();
  inline void clear_has_requester();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* requester_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static PeerListQueryMessage* default_instance_;
};
// -------------------------------------------------------------------

class ConnectedPeerMessage : public ::google::protobuf::Message {
 public:
  ConnectedPeerMessage();
  virtual ~ConnectedPeerMessage();

  ConnectedPeerMessage(const ConnectedPeerMessage& from);

  inline ConnectedPeerMessage& operator=(const ConnectedPeerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectedPeerMessage& default_instance();

  void Swap(ConnectedPeerMessage* other);

  // implements Message ----------------------------------------------

  ConnectedPeerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectedPeerMessage& from);
  void MergeFrom(const ConnectedPeerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required string host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // required string port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.ConnectedPeerMessage)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* host_;
  ::std::string* port_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static ConnectedPeerMessage* default_instance_;
};
// -------------------------------------------------------------------

class PeerListMessage : public ::google::protobuf::Message {
 public:
  PeerListMessage();
  virtual ~PeerListMessage();

  PeerListMessage(const PeerListMessage& from);

  inline PeerListMessage& operator=(const PeerListMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerListMessage& default_instance();

  void Swap(PeerListMessage* other);

  // implements Message ----------------------------------------------

  PeerListMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerListMessage& from);
  void MergeFrom(const PeerListMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .freedm.broker.gm.ConnectedPeerMessage connected_peer_message = 1;
  inline int connected_peer_message_size() const;
  inline void clear_connected_peer_message();
  static const int kConnectedPeerMessageFieldNumber = 1;
  inline const ::freedm::broker::gm::ConnectedPeerMessage& connected_peer_message(int index) const;
  inline ::freedm::broker::gm::ConnectedPeerMessage* mutable_connected_peer_message(int index);
  inline ::freedm::broker::gm::ConnectedPeerMessage* add_connected_peer_message();
  inline const ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::ConnectedPeerMessage >&
      connected_peer_message() const;
  inline ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::ConnectedPeerMessage >*
      mutable_connected_peer_message();

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.PeerListMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::ConnectedPeerMessage > connected_peer_message_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static PeerListMessage* default_instance_;
};
// -------------------------------------------------------------------

class GroupManagementMessage : public ::google::protobuf::Message {
 public:
  GroupManagementMessage();
  virtual ~GroupManagementMessage();

  GroupManagementMessage(const GroupManagementMessage& from);

  inline GroupManagementMessage& operator=(const GroupManagementMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupManagementMessage& default_instance();

  void Swap(GroupManagementMessage* other);

  // implements Message ----------------------------------------------

  GroupManagementMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupManagementMessage& from);
  void MergeFrom(const GroupManagementMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .freedm.broker.gm.AreYouCoordinatorMessage are_you_coordinator_message = 1;
  inline bool has_are_you_coordinator_message() const;
  inline void clear_are_you_coordinator_message();
  static const int kAreYouCoordinatorMessageFieldNumber = 1;
  inline const ::freedm::broker::gm::AreYouCoordinatorMessage& are_you_coordinator_message() const;
  inline ::freedm::broker::gm::AreYouCoordinatorMessage* mutable_are_you_coordinator_message();
  inline ::freedm::broker::gm::AreYouCoordinatorMessage* release_are_you_coordinator_message();
  inline void set_allocated_are_you_coordinator_message(::freedm::broker::gm::AreYouCoordinatorMessage* are_you_coordinator_message);

  // optional .freedm.broker.gm.InviteMessage invite_message = 2;
  inline bool has_invite_message() const;
  inline void clear_invite_message();
  static const int kInviteMessageFieldNumber = 2;
  inline const ::freedm::broker::gm::InviteMessage& invite_message() const;
  inline ::freedm::broker::gm::InviteMessage* mutable_invite_message();
  inline ::freedm::broker::gm::InviteMessage* release_invite_message();
  inline void set_allocated_invite_message(::freedm::broker::gm::InviteMessage* invite_message);

  // optional .freedm.broker.gm.AreYouCoordinatorResponseMessage are_you_coordinator_response_message = 3;
  inline bool has_are_you_coordinator_response_message() const;
  inline void clear_are_you_coordinator_response_message();
  static const int kAreYouCoordinatorResponseMessageFieldNumber = 3;
  inline const ::freedm::broker::gm::AreYouCoordinatorResponseMessage& are_you_coordinator_response_message() const;
  inline ::freedm::broker::gm::AreYouCoordinatorResponseMessage* mutable_are_you_coordinator_response_message();
  inline ::freedm::broker::gm::AreYouCoordinatorResponseMessage* release_are_you_coordinator_response_message();
  inline void set_allocated_are_you_coordinator_response_message(::freedm::broker::gm::AreYouCoordinatorResponseMessage* are_you_coordinator_response_message);

  // optional .freedm.broker.gm.AreYouThereResponseMessage are_you_there_response_message = 4;
  inline bool has_are_you_there_response_message() const;
  inline void clear_are_you_there_response_message();
  static const int kAreYouThereResponseMessageFieldNumber = 4;
  inline const ::freedm::broker::gm::AreYouThereResponseMessage& are_you_there_response_message() const;
  inline ::freedm::broker::gm::AreYouThereResponseMessage* mutable_are_you_there_response_message();
  inline ::freedm::broker::gm::AreYouThereResponseMessage* release_are_you_there_response_message();
  inline void set_allocated_are_you_there_response_message(::freedm::broker::gm::AreYouThereResponseMessage* are_you_there_response_message);

  // optional .freedm.broker.gm.AcceptMessage accept_message = 5;
  inline bool has_accept_message() const;
  inline void clear_accept_message();
  static const int kAcceptMessageFieldNumber = 5;
  inline const ::freedm::broker::gm::AcceptMessage& accept_message() const;
  inline ::freedm::broker::gm::AcceptMessage* mutable_accept_message();
  inline ::freedm::broker::gm::AcceptMessage* release_accept_message();
  inline void set_allocated_accept_message(::freedm::broker::gm::AcceptMessage* accept_message);

  // optional .freedm.broker.gm.AreYouThereMessage are_you_there_message = 6;
  inline bool has_are_you_there_message() const;
  inline void clear_are_you_there_message();
  static const int kAreYouThereMessageFieldNumber = 6;
  inline const ::freedm::broker::gm::AreYouThereMessage& are_you_there_message() const;
  inline ::freedm::broker::gm::AreYouThereMessage* mutable_are_you_there_message();
  inline ::freedm::broker::gm::AreYouThereMessage* release_are_you_there_message();
  inline void set_allocated_are_you_there_message(::freedm::broker::gm::AreYouThereMessage* are_you_there_message);

  // optional .freedm.broker.gm.PeerListQueryMessage peer_list_query_message = 7;
  inline bool has_peer_list_query_message() const;
  inline void clear_peer_list_query_message();
  static const int kPeerListQueryMessageFieldNumber = 7;
  inline const ::freedm::broker::gm::PeerListQueryMessage& peer_list_query_message() const;
  inline ::freedm::broker::gm::PeerListQueryMessage* mutable_peer_list_query_message();
  inline ::freedm::broker::gm::PeerListQueryMessage* release_peer_list_query_message();
  inline void set_allocated_peer_list_query_message(::freedm::broker::gm::PeerListQueryMessage* peer_list_query_message);

  // optional .freedm.broker.gm.PeerListMessage peer_list_message = 8;
  inline bool has_peer_list_message() const;
  inline void clear_peer_list_message();
  static const int kPeerListMessageFieldNumber = 8;
  inline const ::freedm::broker::gm::PeerListMessage& peer_list_message() const;
  inline ::freedm::broker::gm::PeerListMessage* mutable_peer_list_message();
  inline ::freedm::broker::gm::PeerListMessage* release_peer_list_message();
  inline void set_allocated_peer_list_message(::freedm::broker::gm::PeerListMessage* peer_list_message);

  // @@protoc_insertion_point(class_scope:freedm.broker.gm.GroupManagementMessage)
 private:
  inline void set_has_are_you_coordinator_message();
  inline void clear_has_are_you_coordinator_message();
  inline void set_has_invite_message();
  inline void clear_has_invite_message();
  inline void set_has_are_you_coordinator_response_message();
  inline void clear_has_are_you_coordinator_response_message();
  inline void set_has_are_you_there_response_message();
  inline void clear_has_are_you_there_response_message();
  inline void set_has_accept_message();
  inline void clear_has_accept_message();
  inline void set_has_are_you_there_message();
  inline void clear_has_are_you_there_message();
  inline void set_has_peer_list_query_message();
  inline void clear_has_peer_list_query_message();
  inline void set_has_peer_list_message();
  inline void clear_has_peer_list_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::freedm::broker::gm::AreYouCoordinatorMessage* are_you_coordinator_message_;
  ::freedm::broker::gm::InviteMessage* invite_message_;
  ::freedm::broker::gm::AreYouCoordinatorResponseMessage* are_you_coordinator_response_message_;
  ::freedm::broker::gm::AreYouThereResponseMessage* are_you_there_response_message_;
  ::freedm::broker::gm::AcceptMessage* accept_message_;
  ::freedm::broker::gm::AreYouThereMessage* are_you_there_message_;
  ::freedm::broker::gm::PeerListQueryMessage* peer_list_query_message_;
  ::freedm::broker::gm::PeerListMessage* peer_list_message_;
  friend void  protobuf_AddDesc_GroupManagement_2eproto();
  friend void protobuf_AssignDesc_GroupManagement_2eproto();
  friend void protobuf_ShutdownFile_GroupManagement_2eproto();

  void InitAsDefaultInstance();
  static GroupManagementMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// FidStateMessage

// required string deviceid = 1;
inline bool FidStateMessage::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FidStateMessage::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FidStateMessage::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FidStateMessage::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& FidStateMessage::deviceid() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.FidStateMessage.deviceid)
  return *deviceid_;
}
inline void FidStateMessage::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.FidStateMessage.deviceid)
}
inline void FidStateMessage::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.FidStateMessage.deviceid)
}
inline void FidStateMessage::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.FidStateMessage.deviceid)
}
inline ::std::string* FidStateMessage::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.FidStateMessage.deviceid)
  return deviceid_;
}
inline ::std::string* FidStateMessage::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FidStateMessage::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.FidStateMessage.deviceid)
}

// required bool state = 2;
inline bool FidStateMessage::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FidStateMessage::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FidStateMessage::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FidStateMessage::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool FidStateMessage::state() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.FidStateMessage.state)
  return state_;
}
inline void FidStateMessage::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.gm.FidStateMessage.state)
}

// -------------------------------------------------------------------

// AreYouCoordinatorMessage

// required uint32 sequence_no = 1;
inline bool AreYouCoordinatorMessage::has_sequence_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AreYouCoordinatorMessage::set_has_sequence_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AreYouCoordinatorMessage::clear_has_sequence_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AreYouCoordinatorMessage::clear_sequence_no() {
  sequence_no_ = 0u;
  clear_has_sequence_no();
}
inline ::google::protobuf::uint32 AreYouCoordinatorMessage::sequence_no() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouCoordinatorMessage.sequence_no)
  return sequence_no_;
}
inline void AreYouCoordinatorMessage::set_sequence_no(::google::protobuf::uint32 value) {
  set_has_sequence_no();
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouCoordinatorMessage.sequence_no)
}

// -------------------------------------------------------------------

// InviteMessage

// required uint32 group_id = 1;
inline bool InviteMessage::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteMessage::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteMessage::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteMessage::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 InviteMessage::group_id() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.InviteMessage.group_id)
  return group_id_;
}
inline void InviteMessage::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.gm.InviteMessage.group_id)
}

// required string group_leader_uuid = 2;
inline bool InviteMessage::has_group_leader_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteMessage::set_has_group_leader_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteMessage::clear_has_group_leader_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteMessage::clear_group_leader_uuid() {
  if (group_leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_uuid_->clear();
  }
  clear_has_group_leader_uuid();
}
inline const ::std::string& InviteMessage::group_leader_uuid() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.InviteMessage.group_leader_uuid)
  return *group_leader_uuid_;
}
inline void InviteMessage::set_group_leader_uuid(const ::std::string& value) {
  set_has_group_leader_uuid();
  if (group_leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_uuid_ = new ::std::string;
  }
  group_leader_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.InviteMessage.group_leader_uuid)
}
inline void InviteMessage::set_group_leader_uuid(const char* value) {
  set_has_group_leader_uuid();
  if (group_leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_uuid_ = new ::std::string;
  }
  group_leader_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.InviteMessage.group_leader_uuid)
}
inline void InviteMessage::set_group_leader_uuid(const char* value, size_t size) {
  set_has_group_leader_uuid();
  if (group_leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_uuid_ = new ::std::string;
  }
  group_leader_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.InviteMessage.group_leader_uuid)
}
inline ::std::string* InviteMessage::mutable_group_leader_uuid() {
  set_has_group_leader_uuid();
  if (group_leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.InviteMessage.group_leader_uuid)
  return group_leader_uuid_;
}
inline ::std::string* InviteMessage::release_group_leader_uuid() {
  clear_has_group_leader_uuid();
  if (group_leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_leader_uuid_;
    group_leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteMessage::set_allocated_group_leader_uuid(::std::string* group_leader_uuid) {
  if (group_leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_leader_uuid_;
  }
  if (group_leader_uuid) {
    set_has_group_leader_uuid();
    group_leader_uuid_ = group_leader_uuid;
  } else {
    clear_has_group_leader_uuid();
    group_leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.InviteMessage.group_leader_uuid)
}

// required string group_leader_host = 3;
inline bool InviteMessage::has_group_leader_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteMessage::set_has_group_leader_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteMessage::clear_has_group_leader_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteMessage::clear_group_leader_host() {
  if (group_leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_host_->clear();
  }
  clear_has_group_leader_host();
}
inline const ::std::string& InviteMessage::group_leader_host() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.InviteMessage.group_leader_host)
  return *group_leader_host_;
}
inline void InviteMessage::set_group_leader_host(const ::std::string& value) {
  set_has_group_leader_host();
  if (group_leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_host_ = new ::std::string;
  }
  group_leader_host_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.InviteMessage.group_leader_host)
}
inline void InviteMessage::set_group_leader_host(const char* value) {
  set_has_group_leader_host();
  if (group_leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_host_ = new ::std::string;
  }
  group_leader_host_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.InviteMessage.group_leader_host)
}
inline void InviteMessage::set_group_leader_host(const char* value, size_t size) {
  set_has_group_leader_host();
  if (group_leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_host_ = new ::std::string;
  }
  group_leader_host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.InviteMessage.group_leader_host)
}
inline ::std::string* InviteMessage::mutable_group_leader_host() {
  set_has_group_leader_host();
  if (group_leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.InviteMessage.group_leader_host)
  return group_leader_host_;
}
inline ::std::string* InviteMessage::release_group_leader_host() {
  clear_has_group_leader_host();
  if (group_leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_leader_host_;
    group_leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteMessage::set_allocated_group_leader_host(::std::string* group_leader_host) {
  if (group_leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_leader_host_;
  }
  if (group_leader_host) {
    set_has_group_leader_host();
    group_leader_host_ = group_leader_host;
  } else {
    clear_has_group_leader_host();
    group_leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.InviteMessage.group_leader_host)
}

// required string group_leader_port = 4;
inline bool InviteMessage::has_group_leader_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InviteMessage::set_has_group_leader_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InviteMessage::clear_has_group_leader_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InviteMessage::clear_group_leader_port() {
  if (group_leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_port_->clear();
  }
  clear_has_group_leader_port();
}
inline const ::std::string& InviteMessage::group_leader_port() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.InviteMessage.group_leader_port)
  return *group_leader_port_;
}
inline void InviteMessage::set_group_leader_port(const ::std::string& value) {
  set_has_group_leader_port();
  if (group_leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_port_ = new ::std::string;
  }
  group_leader_port_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.InviteMessage.group_leader_port)
}
inline void InviteMessage::set_group_leader_port(const char* value) {
  set_has_group_leader_port();
  if (group_leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_port_ = new ::std::string;
  }
  group_leader_port_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.InviteMessage.group_leader_port)
}
inline void InviteMessage::set_group_leader_port(const char* value, size_t size) {
  set_has_group_leader_port();
  if (group_leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_port_ = new ::std::string;
  }
  group_leader_port_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.InviteMessage.group_leader_port)
}
inline ::std::string* InviteMessage::mutable_group_leader_port() {
  set_has_group_leader_port();
  if (group_leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    group_leader_port_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.InviteMessage.group_leader_port)
  return group_leader_port_;
}
inline ::std::string* InviteMessage::release_group_leader_port() {
  clear_has_group_leader_port();
  if (group_leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = group_leader_port_;
    group_leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteMessage::set_allocated_group_leader_port(::std::string* group_leader_port) {
  if (group_leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_leader_port_;
  }
  if (group_leader_port) {
    set_has_group_leader_port();
    group_leader_port_ = group_leader_port;
  } else {
    clear_has_group_leader_port();
    group_leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.InviteMessage.group_leader_port)
}

// -------------------------------------------------------------------

// AreYouCoordinatorResponseMessage

// required string payload = 1;
inline bool AreYouCoordinatorResponseMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AreYouCoordinatorResponseMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AreYouCoordinatorResponseMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AreYouCoordinatorResponseMessage::clear_payload() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& AreYouCoordinatorResponseMessage::payload() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouCoordinatorResponseMessage.payload)
  return *payload_;
}
inline void AreYouCoordinatorResponseMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouCoordinatorResponseMessage.payload)
}
inline void AreYouCoordinatorResponseMessage::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.AreYouCoordinatorResponseMessage.payload)
}
inline void AreYouCoordinatorResponseMessage::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.AreYouCoordinatorResponseMessage.payload)
}
inline ::std::string* AreYouCoordinatorResponseMessage::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouCoordinatorResponseMessage.payload)
  return payload_;
}
inline ::std::string* AreYouCoordinatorResponseMessage::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreYouCoordinatorResponseMessage::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.AreYouCoordinatorResponseMessage.payload)
}

// required string leader_uuid = 2;
inline bool AreYouCoordinatorResponseMessage::has_leader_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AreYouCoordinatorResponseMessage::set_has_leader_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AreYouCoordinatorResponseMessage::clear_has_leader_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AreYouCoordinatorResponseMessage::clear_leader_uuid() {
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_->clear();
  }
  clear_has_leader_uuid();
}
inline const ::std::string& AreYouCoordinatorResponseMessage::leader_uuid() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_uuid)
  return *leader_uuid_;
}
inline void AreYouCoordinatorResponseMessage::set_leader_uuid(const ::std::string& value) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_uuid)
}
inline void AreYouCoordinatorResponseMessage::set_leader_uuid(const char* value) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_uuid)
}
inline void AreYouCoordinatorResponseMessage::set_leader_uuid(const char* value, size_t size) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_uuid)
}
inline ::std::string* AreYouCoordinatorResponseMessage::mutable_leader_uuid() {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_uuid)
  return leader_uuid_;
}
inline ::std::string* AreYouCoordinatorResponseMessage::release_leader_uuid() {
  clear_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_uuid_;
    leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreYouCoordinatorResponseMessage::set_allocated_leader_uuid(::std::string* leader_uuid) {
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_uuid_;
  }
  if (leader_uuid) {
    set_has_leader_uuid();
    leader_uuid_ = leader_uuid;
  } else {
    clear_has_leader_uuid();
    leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_uuid)
}

// required string leader_host = 3;
inline bool AreYouCoordinatorResponseMessage::has_leader_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AreYouCoordinatorResponseMessage::set_has_leader_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AreYouCoordinatorResponseMessage::clear_has_leader_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AreYouCoordinatorResponseMessage::clear_leader_host() {
  if (leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_->clear();
  }
  clear_has_leader_host();
}
inline const ::std::string& AreYouCoordinatorResponseMessage::leader_host() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_host)
  return *leader_host_;
}
inline void AreYouCoordinatorResponseMessage::set_leader_host(const ::std::string& value) {
  set_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_ = new ::std::string;
  }
  leader_host_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_host)
}
inline void AreYouCoordinatorResponseMessage::set_leader_host(const char* value) {
  set_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_ = new ::std::string;
  }
  leader_host_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_host)
}
inline void AreYouCoordinatorResponseMessage::set_leader_host(const char* value, size_t size) {
  set_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_ = new ::std::string;
  }
  leader_host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_host)
}
inline ::std::string* AreYouCoordinatorResponseMessage::mutable_leader_host() {
  set_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_host)
  return leader_host_;
}
inline ::std::string* AreYouCoordinatorResponseMessage::release_leader_host() {
  clear_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_host_;
    leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreYouCoordinatorResponseMessage::set_allocated_leader_host(::std::string* leader_host) {
  if (leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_host_;
  }
  if (leader_host) {
    set_has_leader_host();
    leader_host_ = leader_host;
  } else {
    clear_has_leader_host();
    leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_host)
}

// required string leader_port = 4;
inline bool AreYouCoordinatorResponseMessage::has_leader_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AreYouCoordinatorResponseMessage::set_has_leader_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AreYouCoordinatorResponseMessage::clear_has_leader_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AreYouCoordinatorResponseMessage::clear_leader_port() {
  if (leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_->clear();
  }
  clear_has_leader_port();
}
inline const ::std::string& AreYouCoordinatorResponseMessage::leader_port() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_port)
  return *leader_port_;
}
inline void AreYouCoordinatorResponseMessage::set_leader_port(const ::std::string& value) {
  set_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_ = new ::std::string;
  }
  leader_port_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_port)
}
inline void AreYouCoordinatorResponseMessage::set_leader_port(const char* value) {
  set_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_ = new ::std::string;
  }
  leader_port_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_port)
}
inline void AreYouCoordinatorResponseMessage::set_leader_port(const char* value, size_t size) {
  set_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_ = new ::std::string;
  }
  leader_port_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_port)
}
inline ::std::string* AreYouCoordinatorResponseMessage::mutable_leader_port() {
  set_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_port)
  return leader_port_;
}
inline ::std::string* AreYouCoordinatorResponseMessage::release_leader_port() {
  clear_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_port_;
    leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreYouCoordinatorResponseMessage::set_allocated_leader_port(::std::string* leader_port) {
  if (leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_port_;
  }
  if (leader_port) {
    set_has_leader_port();
    leader_port_ = leader_port;
  } else {
    clear_has_leader_port();
    leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.AreYouCoordinatorResponseMessage.leader_port)
}

// required uint32 sequence_no = 5;
inline bool AreYouCoordinatorResponseMessage::has_sequence_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AreYouCoordinatorResponseMessage::set_has_sequence_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AreYouCoordinatorResponseMessage::clear_has_sequence_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AreYouCoordinatorResponseMessage::clear_sequence_no() {
  sequence_no_ = 0u;
  clear_has_sequence_no();
}
inline ::google::protobuf::uint32 AreYouCoordinatorResponseMessage::sequence_no() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouCoordinatorResponseMessage.sequence_no)
  return sequence_no_;
}
inline void AreYouCoordinatorResponseMessage::set_sequence_no(::google::protobuf::uint32 value) {
  set_has_sequence_no();
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouCoordinatorResponseMessage.sequence_no)
}

// repeated .freedm.broker.gm.FidStateMessage fid_state = 6;
inline int AreYouCoordinatorResponseMessage::fid_state_size() const {
  return fid_state_.size();
}
inline void AreYouCoordinatorResponseMessage::clear_fid_state() {
  fid_state_.Clear();
}
inline const ::freedm::broker::gm::FidStateMessage& AreYouCoordinatorResponseMessage::fid_state(int index) const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouCoordinatorResponseMessage.fid_state)
  return fid_state_.Get(index);
}
inline ::freedm::broker::gm::FidStateMessage* AreYouCoordinatorResponseMessage::mutable_fid_state(int index) {
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouCoordinatorResponseMessage.fid_state)
  return fid_state_.Mutable(index);
}
inline ::freedm::broker::gm::FidStateMessage* AreYouCoordinatorResponseMessage::add_fid_state() {
  // @@protoc_insertion_point(field_add:freedm.broker.gm.AreYouCoordinatorResponseMessage.fid_state)
  return fid_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::FidStateMessage >&
AreYouCoordinatorResponseMessage::fid_state() const {
  // @@protoc_insertion_point(field_list:freedm.broker.gm.AreYouCoordinatorResponseMessage.fid_state)
  return fid_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::FidStateMessage >*
AreYouCoordinatorResponseMessage::mutable_fid_state() {
  // @@protoc_insertion_point(field_mutable_list:freedm.broker.gm.AreYouCoordinatorResponseMessage.fid_state)
  return &fid_state_;
}

// -------------------------------------------------------------------

// AreYouThereResponseMessage

// required string payload = 1;
inline bool AreYouThereResponseMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AreYouThereResponseMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AreYouThereResponseMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AreYouThereResponseMessage::clear_payload() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& AreYouThereResponseMessage::payload() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouThereResponseMessage.payload)
  return *payload_;
}
inline void AreYouThereResponseMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouThereResponseMessage.payload)
}
inline void AreYouThereResponseMessage::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.AreYouThereResponseMessage.payload)
}
inline void AreYouThereResponseMessage::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.AreYouThereResponseMessage.payload)
}
inline ::std::string* AreYouThereResponseMessage::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouThereResponseMessage.payload)
  return payload_;
}
inline ::std::string* AreYouThereResponseMessage::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreYouThereResponseMessage::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.AreYouThereResponseMessage.payload)
}

// required string leader_uuid = 2;
inline bool AreYouThereResponseMessage::has_leader_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AreYouThereResponseMessage::set_has_leader_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AreYouThereResponseMessage::clear_has_leader_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AreYouThereResponseMessage::clear_leader_uuid() {
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_->clear();
  }
  clear_has_leader_uuid();
}
inline const ::std::string& AreYouThereResponseMessage::leader_uuid() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouThereResponseMessage.leader_uuid)
  return *leader_uuid_;
}
inline void AreYouThereResponseMessage::set_leader_uuid(const ::std::string& value) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouThereResponseMessage.leader_uuid)
}
inline void AreYouThereResponseMessage::set_leader_uuid(const char* value) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.AreYouThereResponseMessage.leader_uuid)
}
inline void AreYouThereResponseMessage::set_leader_uuid(const char* value, size_t size) {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  leader_uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.AreYouThereResponseMessage.leader_uuid)
}
inline ::std::string* AreYouThereResponseMessage::mutable_leader_uuid() {
  set_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouThereResponseMessage.leader_uuid)
  return leader_uuid_;
}
inline ::std::string* AreYouThereResponseMessage::release_leader_uuid() {
  clear_has_leader_uuid();
  if (leader_uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_uuid_;
    leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreYouThereResponseMessage::set_allocated_leader_uuid(::std::string* leader_uuid) {
  if (leader_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_uuid_;
  }
  if (leader_uuid) {
    set_has_leader_uuid();
    leader_uuid_ = leader_uuid;
  } else {
    clear_has_leader_uuid();
    leader_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.AreYouThereResponseMessage.leader_uuid)
}

// required string leader_host = 3;
inline bool AreYouThereResponseMessage::has_leader_host() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AreYouThereResponseMessage::set_has_leader_host() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AreYouThereResponseMessage::clear_has_leader_host() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AreYouThereResponseMessage::clear_leader_host() {
  if (leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_->clear();
  }
  clear_has_leader_host();
}
inline const ::std::string& AreYouThereResponseMessage::leader_host() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouThereResponseMessage.leader_host)
  return *leader_host_;
}
inline void AreYouThereResponseMessage::set_leader_host(const ::std::string& value) {
  set_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_ = new ::std::string;
  }
  leader_host_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouThereResponseMessage.leader_host)
}
inline void AreYouThereResponseMessage::set_leader_host(const char* value) {
  set_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_ = new ::std::string;
  }
  leader_host_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.AreYouThereResponseMessage.leader_host)
}
inline void AreYouThereResponseMessage::set_leader_host(const char* value, size_t size) {
  set_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_ = new ::std::string;
  }
  leader_host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.AreYouThereResponseMessage.leader_host)
}
inline ::std::string* AreYouThereResponseMessage::mutable_leader_host() {
  set_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouThereResponseMessage.leader_host)
  return leader_host_;
}
inline ::std::string* AreYouThereResponseMessage::release_leader_host() {
  clear_has_leader_host();
  if (leader_host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_host_;
    leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreYouThereResponseMessage::set_allocated_leader_host(::std::string* leader_host) {
  if (leader_host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_host_;
  }
  if (leader_host) {
    set_has_leader_host();
    leader_host_ = leader_host;
  } else {
    clear_has_leader_host();
    leader_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.AreYouThereResponseMessage.leader_host)
}

// required string leader_port = 4;
inline bool AreYouThereResponseMessage::has_leader_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AreYouThereResponseMessage::set_has_leader_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AreYouThereResponseMessage::clear_has_leader_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AreYouThereResponseMessage::clear_leader_port() {
  if (leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_->clear();
  }
  clear_has_leader_port();
}
inline const ::std::string& AreYouThereResponseMessage::leader_port() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouThereResponseMessage.leader_port)
  return *leader_port_;
}
inline void AreYouThereResponseMessage::set_leader_port(const ::std::string& value) {
  set_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_ = new ::std::string;
  }
  leader_port_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouThereResponseMessage.leader_port)
}
inline void AreYouThereResponseMessage::set_leader_port(const char* value) {
  set_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_ = new ::std::string;
  }
  leader_port_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.AreYouThereResponseMessage.leader_port)
}
inline void AreYouThereResponseMessage::set_leader_port(const char* value, size_t size) {
  set_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_ = new ::std::string;
  }
  leader_port_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.AreYouThereResponseMessage.leader_port)
}
inline ::std::string* AreYouThereResponseMessage::mutable_leader_port() {
  set_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leader_port_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.AreYouThereResponseMessage.leader_port)
  return leader_port_;
}
inline ::std::string* AreYouThereResponseMessage::release_leader_port() {
  clear_has_leader_port();
  if (leader_port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leader_port_;
    leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreYouThereResponseMessage::set_allocated_leader_port(::std::string* leader_port) {
  if (leader_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leader_port_;
  }
  if (leader_port) {
    set_has_leader_port();
    leader_port_ = leader_port;
  } else {
    clear_has_leader_port();
    leader_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.AreYouThereResponseMessage.leader_port)
}

// required uint32 sequence_no = 5;
inline bool AreYouThereResponseMessage::has_sequence_no() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AreYouThereResponseMessage::set_has_sequence_no() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AreYouThereResponseMessage::clear_has_sequence_no() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AreYouThereResponseMessage::clear_sequence_no() {
  sequence_no_ = 0u;
  clear_has_sequence_no();
}
inline ::google::protobuf::uint32 AreYouThereResponseMessage::sequence_no() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouThereResponseMessage.sequence_no)
  return sequence_no_;
}
inline void AreYouThereResponseMessage::set_sequence_no(::google::protobuf::uint32 value) {
  set_has_sequence_no();
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouThereResponseMessage.sequence_no)
}

// -------------------------------------------------------------------

// AcceptMessage

// required uint32 group_id = 1;
inline bool AcceptMessage::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptMessage::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptMessage::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptMessage::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 AcceptMessage::group_id() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AcceptMessage.group_id)
  return group_id_;
}
inline void AcceptMessage::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AcceptMessage.group_id)
}

// -------------------------------------------------------------------

// AreYouThereMessage

// required uint32 group_id = 1;
inline bool AreYouThereMessage::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AreYouThereMessage::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AreYouThereMessage::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AreYouThereMessage::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
inline ::google::protobuf::uint32 AreYouThereMessage::group_id() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouThereMessage.group_id)
  return group_id_;
}
inline void AreYouThereMessage::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouThereMessage.group_id)
}

// required uint32 sequence_no = 2;
inline bool AreYouThereMessage::has_sequence_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AreYouThereMessage::set_has_sequence_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AreYouThereMessage::clear_has_sequence_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AreYouThereMessage::clear_sequence_no() {
  sequence_no_ = 0u;
  clear_has_sequence_no();
}
inline ::google::protobuf::uint32 AreYouThereMessage::sequence_no() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.AreYouThereMessage.sequence_no)
  return sequence_no_;
}
inline void AreYouThereMessage::set_sequence_no(::google::protobuf::uint32 value) {
  set_has_sequence_no();
  sequence_no_ = value;
  // @@protoc_insertion_point(field_set:freedm.broker.gm.AreYouThereMessage.sequence_no)
}

// -------------------------------------------------------------------

// PeerListQueryMessage

// required string requester = 1;
inline bool PeerListQueryMessage::has_requester() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeerListQueryMessage::set_has_requester() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeerListQueryMessage::clear_has_requester() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeerListQueryMessage::clear_requester() {
  if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requester_->clear();
  }
  clear_has_requester();
}
inline const ::std::string& PeerListQueryMessage::requester() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.PeerListQueryMessage.requester)
  return *requester_;
}
inline void PeerListQueryMessage::set_requester(const ::std::string& value) {
  set_has_requester();
  if (requester_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requester_ = new ::std::string;
  }
  requester_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.PeerListQueryMessage.requester)
}
inline void PeerListQueryMessage::set_requester(const char* value) {
  set_has_requester();
  if (requester_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requester_ = new ::std::string;
  }
  requester_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.PeerListQueryMessage.requester)
}
inline void PeerListQueryMessage::set_requester(const char* value, size_t size) {
  set_has_requester();
  if (requester_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requester_ = new ::std::string;
  }
  requester_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.PeerListQueryMessage.requester)
}
inline ::std::string* PeerListQueryMessage::mutable_requester() {
  set_has_requester();
  if (requester_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    requester_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.PeerListQueryMessage.requester)
  return requester_;
}
inline ::std::string* PeerListQueryMessage::release_requester() {
  clear_has_requester();
  if (requester_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = requester_;
    requester_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PeerListQueryMessage::set_allocated_requester(::std::string* requester) {
  if (requester_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requester_;
  }
  if (requester) {
    set_has_requester();
    requester_ = requester;
  } else {
    clear_has_requester();
    requester_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.PeerListQueryMessage.requester)
}

// -------------------------------------------------------------------

// ConnectedPeerMessage

// required string uuid = 1;
inline bool ConnectedPeerMessage::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectedPeerMessage::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectedPeerMessage::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectedPeerMessage::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& ConnectedPeerMessage::uuid() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.ConnectedPeerMessage.uuid)
  return *uuid_;
}
inline void ConnectedPeerMessage::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.ConnectedPeerMessage.uuid)
}
inline void ConnectedPeerMessage::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.ConnectedPeerMessage.uuid)
}
inline void ConnectedPeerMessage::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.ConnectedPeerMessage.uuid)
}
inline ::std::string* ConnectedPeerMessage::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.ConnectedPeerMessage.uuid)
  return uuid_;
}
inline ::std::string* ConnectedPeerMessage::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectedPeerMessage::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.ConnectedPeerMessage.uuid)
}

// required string host = 2;
inline bool ConnectedPeerMessage::has_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectedPeerMessage::set_has_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectedPeerMessage::clear_has_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectedPeerMessage::clear_host() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& ConnectedPeerMessage::host() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.ConnectedPeerMessage.host)
  return *host_;
}
inline void ConnectedPeerMessage::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.ConnectedPeerMessage.host)
}
inline void ConnectedPeerMessage::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.ConnectedPeerMessage.host)
}
inline void ConnectedPeerMessage::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.ConnectedPeerMessage.host)
}
inline ::std::string* ConnectedPeerMessage::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.ConnectedPeerMessage.host)
  return host_;
}
inline ::std::string* ConnectedPeerMessage::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectedPeerMessage::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.ConnectedPeerMessage.host)
}

// required string port = 3;
inline bool ConnectedPeerMessage::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectedPeerMessage::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectedPeerMessage::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectedPeerMessage::clear_port() {
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& ConnectedPeerMessage::port() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.ConnectedPeerMessage.port)
  return *port_;
}
inline void ConnectedPeerMessage::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(value);
  // @@protoc_insertion_point(field_set:freedm.broker.gm.ConnectedPeerMessage.port)
}
inline void ConnectedPeerMessage::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(value);
  // @@protoc_insertion_point(field_set_char:freedm.broker.gm.ConnectedPeerMessage.port)
}
inline void ConnectedPeerMessage::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:freedm.broker.gm.ConnectedPeerMessage.port)
}
inline ::std::string* ConnectedPeerMessage::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.ConnectedPeerMessage.port)
  return port_;
}
inline ::std::string* ConnectedPeerMessage::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectedPeerMessage::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.ConnectedPeerMessage.port)
}

// -------------------------------------------------------------------

// PeerListMessage

// repeated .freedm.broker.gm.ConnectedPeerMessage connected_peer_message = 1;
inline int PeerListMessage::connected_peer_message_size() const {
  return connected_peer_message_.size();
}
inline void PeerListMessage::clear_connected_peer_message() {
  connected_peer_message_.Clear();
}
inline const ::freedm::broker::gm::ConnectedPeerMessage& PeerListMessage::connected_peer_message(int index) const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.PeerListMessage.connected_peer_message)
  return connected_peer_message_.Get(index);
}
inline ::freedm::broker::gm::ConnectedPeerMessage* PeerListMessage::mutable_connected_peer_message(int index) {
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.PeerListMessage.connected_peer_message)
  return connected_peer_message_.Mutable(index);
}
inline ::freedm::broker::gm::ConnectedPeerMessage* PeerListMessage::add_connected_peer_message() {
  // @@protoc_insertion_point(field_add:freedm.broker.gm.PeerListMessage.connected_peer_message)
  return connected_peer_message_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::ConnectedPeerMessage >&
PeerListMessage::connected_peer_message() const {
  // @@protoc_insertion_point(field_list:freedm.broker.gm.PeerListMessage.connected_peer_message)
  return connected_peer_message_;
}
inline ::google::protobuf::RepeatedPtrField< ::freedm::broker::gm::ConnectedPeerMessage >*
PeerListMessage::mutable_connected_peer_message() {
  // @@protoc_insertion_point(field_mutable_list:freedm.broker.gm.PeerListMessage.connected_peer_message)
  return &connected_peer_message_;
}

// -------------------------------------------------------------------

// GroupManagementMessage

// optional .freedm.broker.gm.AreYouCoordinatorMessage are_you_coordinator_message = 1;
inline bool GroupManagementMessage::has_are_you_coordinator_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupManagementMessage::set_has_are_you_coordinator_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupManagementMessage::clear_has_are_you_coordinator_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupManagementMessage::clear_are_you_coordinator_message() {
  if (are_you_coordinator_message_ != NULL) are_you_coordinator_message_->::freedm::broker::gm::AreYouCoordinatorMessage::Clear();
  clear_has_are_you_coordinator_message();
}
inline const ::freedm::broker::gm::AreYouCoordinatorMessage& GroupManagementMessage::are_you_coordinator_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.GroupManagementMessage.are_you_coordinator_message)
  return are_you_coordinator_message_ != NULL ? *are_you_coordinator_message_ : *default_instance_->are_you_coordinator_message_;
}
inline ::freedm::broker::gm::AreYouCoordinatorMessage* GroupManagementMessage::mutable_are_you_coordinator_message() {
  set_has_are_you_coordinator_message();
  if (are_you_coordinator_message_ == NULL) are_you_coordinator_message_ = new ::freedm::broker::gm::AreYouCoordinatorMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.GroupManagementMessage.are_you_coordinator_message)
  return are_you_coordinator_message_;
}
inline ::freedm::broker::gm::AreYouCoordinatorMessage* GroupManagementMessage::release_are_you_coordinator_message() {
  clear_has_are_you_coordinator_message();
  ::freedm::broker::gm::AreYouCoordinatorMessage* temp = are_you_coordinator_message_;
  are_you_coordinator_message_ = NULL;
  return temp;
}
inline void GroupManagementMessage::set_allocated_are_you_coordinator_message(::freedm::broker::gm::AreYouCoordinatorMessage* are_you_coordinator_message) {
  delete are_you_coordinator_message_;
  are_you_coordinator_message_ = are_you_coordinator_message;
  if (are_you_coordinator_message) {
    set_has_are_you_coordinator_message();
  } else {
    clear_has_are_you_coordinator_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.GroupManagementMessage.are_you_coordinator_message)
}

// optional .freedm.broker.gm.InviteMessage invite_message = 2;
inline bool GroupManagementMessage::has_invite_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupManagementMessage::set_has_invite_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupManagementMessage::clear_has_invite_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupManagementMessage::clear_invite_message() {
  if (invite_message_ != NULL) invite_message_->::freedm::broker::gm::InviteMessage::Clear();
  clear_has_invite_message();
}
inline const ::freedm::broker::gm::InviteMessage& GroupManagementMessage::invite_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.GroupManagementMessage.invite_message)
  return invite_message_ != NULL ? *invite_message_ : *default_instance_->invite_message_;
}
inline ::freedm::broker::gm::InviteMessage* GroupManagementMessage::mutable_invite_message() {
  set_has_invite_message();
  if (invite_message_ == NULL) invite_message_ = new ::freedm::broker::gm::InviteMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.GroupManagementMessage.invite_message)
  return invite_message_;
}
inline ::freedm::broker::gm::InviteMessage* GroupManagementMessage::release_invite_message() {
  clear_has_invite_message();
  ::freedm::broker::gm::InviteMessage* temp = invite_message_;
  invite_message_ = NULL;
  return temp;
}
inline void GroupManagementMessage::set_allocated_invite_message(::freedm::broker::gm::InviteMessage* invite_message) {
  delete invite_message_;
  invite_message_ = invite_message;
  if (invite_message) {
    set_has_invite_message();
  } else {
    clear_has_invite_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.GroupManagementMessage.invite_message)
}

// optional .freedm.broker.gm.AreYouCoordinatorResponseMessage are_you_coordinator_response_message = 3;
inline bool GroupManagementMessage::has_are_you_coordinator_response_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupManagementMessage::set_has_are_you_coordinator_response_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupManagementMessage::clear_has_are_you_coordinator_response_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupManagementMessage::clear_are_you_coordinator_response_message() {
  if (are_you_coordinator_response_message_ != NULL) are_you_coordinator_response_message_->::freedm::broker::gm::AreYouCoordinatorResponseMessage::Clear();
  clear_has_are_you_coordinator_response_message();
}
inline const ::freedm::broker::gm::AreYouCoordinatorResponseMessage& GroupManagementMessage::are_you_coordinator_response_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.GroupManagementMessage.are_you_coordinator_response_message)
  return are_you_coordinator_response_message_ != NULL ? *are_you_coordinator_response_message_ : *default_instance_->are_you_coordinator_response_message_;
}
inline ::freedm::broker::gm::AreYouCoordinatorResponseMessage* GroupManagementMessage::mutable_are_you_coordinator_response_message() {
  set_has_are_you_coordinator_response_message();
  if (are_you_coordinator_response_message_ == NULL) are_you_coordinator_response_message_ = new ::freedm::broker::gm::AreYouCoordinatorResponseMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.GroupManagementMessage.are_you_coordinator_response_message)
  return are_you_coordinator_response_message_;
}
inline ::freedm::broker::gm::AreYouCoordinatorResponseMessage* GroupManagementMessage::release_are_you_coordinator_response_message() {
  clear_has_are_you_coordinator_response_message();
  ::freedm::broker::gm::AreYouCoordinatorResponseMessage* temp = are_you_coordinator_response_message_;
  are_you_coordinator_response_message_ = NULL;
  return temp;
}
inline void GroupManagementMessage::set_allocated_are_you_coordinator_response_message(::freedm::broker::gm::AreYouCoordinatorResponseMessage* are_you_coordinator_response_message) {
  delete are_you_coordinator_response_message_;
  are_you_coordinator_response_message_ = are_you_coordinator_response_message;
  if (are_you_coordinator_response_message) {
    set_has_are_you_coordinator_response_message();
  } else {
    clear_has_are_you_coordinator_response_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.GroupManagementMessage.are_you_coordinator_response_message)
}

// optional .freedm.broker.gm.AreYouThereResponseMessage are_you_there_response_message = 4;
inline bool GroupManagementMessage::has_are_you_there_response_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupManagementMessage::set_has_are_you_there_response_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupManagementMessage::clear_has_are_you_there_response_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupManagementMessage::clear_are_you_there_response_message() {
  if (are_you_there_response_message_ != NULL) are_you_there_response_message_->::freedm::broker::gm::AreYouThereResponseMessage::Clear();
  clear_has_are_you_there_response_message();
}
inline const ::freedm::broker::gm::AreYouThereResponseMessage& GroupManagementMessage::are_you_there_response_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.GroupManagementMessage.are_you_there_response_message)
  return are_you_there_response_message_ != NULL ? *are_you_there_response_message_ : *default_instance_->are_you_there_response_message_;
}
inline ::freedm::broker::gm::AreYouThereResponseMessage* GroupManagementMessage::mutable_are_you_there_response_message() {
  set_has_are_you_there_response_message();
  if (are_you_there_response_message_ == NULL) are_you_there_response_message_ = new ::freedm::broker::gm::AreYouThereResponseMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.GroupManagementMessage.are_you_there_response_message)
  return are_you_there_response_message_;
}
inline ::freedm::broker::gm::AreYouThereResponseMessage* GroupManagementMessage::release_are_you_there_response_message() {
  clear_has_are_you_there_response_message();
  ::freedm::broker::gm::AreYouThereResponseMessage* temp = are_you_there_response_message_;
  are_you_there_response_message_ = NULL;
  return temp;
}
inline void GroupManagementMessage::set_allocated_are_you_there_response_message(::freedm::broker::gm::AreYouThereResponseMessage* are_you_there_response_message) {
  delete are_you_there_response_message_;
  are_you_there_response_message_ = are_you_there_response_message;
  if (are_you_there_response_message) {
    set_has_are_you_there_response_message();
  } else {
    clear_has_are_you_there_response_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.GroupManagementMessage.are_you_there_response_message)
}

// optional .freedm.broker.gm.AcceptMessage accept_message = 5;
inline bool GroupManagementMessage::has_accept_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupManagementMessage::set_has_accept_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupManagementMessage::clear_has_accept_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupManagementMessage::clear_accept_message() {
  if (accept_message_ != NULL) accept_message_->::freedm::broker::gm::AcceptMessage::Clear();
  clear_has_accept_message();
}
inline const ::freedm::broker::gm::AcceptMessage& GroupManagementMessage::accept_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.GroupManagementMessage.accept_message)
  return accept_message_ != NULL ? *accept_message_ : *default_instance_->accept_message_;
}
inline ::freedm::broker::gm::AcceptMessage* GroupManagementMessage::mutable_accept_message() {
  set_has_accept_message();
  if (accept_message_ == NULL) accept_message_ = new ::freedm::broker::gm::AcceptMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.GroupManagementMessage.accept_message)
  return accept_message_;
}
inline ::freedm::broker::gm::AcceptMessage* GroupManagementMessage::release_accept_message() {
  clear_has_accept_message();
  ::freedm::broker::gm::AcceptMessage* temp = accept_message_;
  accept_message_ = NULL;
  return temp;
}
inline void GroupManagementMessage::set_allocated_accept_message(::freedm::broker::gm::AcceptMessage* accept_message) {
  delete accept_message_;
  accept_message_ = accept_message;
  if (accept_message) {
    set_has_accept_message();
  } else {
    clear_has_accept_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.GroupManagementMessage.accept_message)
}

// optional .freedm.broker.gm.AreYouThereMessage are_you_there_message = 6;
inline bool GroupManagementMessage::has_are_you_there_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupManagementMessage::set_has_are_you_there_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupManagementMessage::clear_has_are_you_there_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupManagementMessage::clear_are_you_there_message() {
  if (are_you_there_message_ != NULL) are_you_there_message_->::freedm::broker::gm::AreYouThereMessage::Clear();
  clear_has_are_you_there_message();
}
inline const ::freedm::broker::gm::AreYouThereMessage& GroupManagementMessage::are_you_there_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.GroupManagementMessage.are_you_there_message)
  return are_you_there_message_ != NULL ? *are_you_there_message_ : *default_instance_->are_you_there_message_;
}
inline ::freedm::broker::gm::AreYouThereMessage* GroupManagementMessage::mutable_are_you_there_message() {
  set_has_are_you_there_message();
  if (are_you_there_message_ == NULL) are_you_there_message_ = new ::freedm::broker::gm::AreYouThereMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.GroupManagementMessage.are_you_there_message)
  return are_you_there_message_;
}
inline ::freedm::broker::gm::AreYouThereMessage* GroupManagementMessage::release_are_you_there_message() {
  clear_has_are_you_there_message();
  ::freedm::broker::gm::AreYouThereMessage* temp = are_you_there_message_;
  are_you_there_message_ = NULL;
  return temp;
}
inline void GroupManagementMessage::set_allocated_are_you_there_message(::freedm::broker::gm::AreYouThereMessage* are_you_there_message) {
  delete are_you_there_message_;
  are_you_there_message_ = are_you_there_message;
  if (are_you_there_message) {
    set_has_are_you_there_message();
  } else {
    clear_has_are_you_there_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.GroupManagementMessage.are_you_there_message)
}

// optional .freedm.broker.gm.PeerListQueryMessage peer_list_query_message = 7;
inline bool GroupManagementMessage::has_peer_list_query_message() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupManagementMessage::set_has_peer_list_query_message() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupManagementMessage::clear_has_peer_list_query_message() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupManagementMessage::clear_peer_list_query_message() {
  if (peer_list_query_message_ != NULL) peer_list_query_message_->::freedm::broker::gm::PeerListQueryMessage::Clear();
  clear_has_peer_list_query_message();
}
inline const ::freedm::broker::gm::PeerListQueryMessage& GroupManagementMessage::peer_list_query_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.GroupManagementMessage.peer_list_query_message)
  return peer_list_query_message_ != NULL ? *peer_list_query_message_ : *default_instance_->peer_list_query_message_;
}
inline ::freedm::broker::gm::PeerListQueryMessage* GroupManagementMessage::mutable_peer_list_query_message() {
  set_has_peer_list_query_message();
  if (peer_list_query_message_ == NULL) peer_list_query_message_ = new ::freedm::broker::gm::PeerListQueryMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.GroupManagementMessage.peer_list_query_message)
  return peer_list_query_message_;
}
inline ::freedm::broker::gm::PeerListQueryMessage* GroupManagementMessage::release_peer_list_query_message() {
  clear_has_peer_list_query_message();
  ::freedm::broker::gm::PeerListQueryMessage* temp = peer_list_query_message_;
  peer_list_query_message_ = NULL;
  return temp;
}
inline void GroupManagementMessage::set_allocated_peer_list_query_message(::freedm::broker::gm::PeerListQueryMessage* peer_list_query_message) {
  delete peer_list_query_message_;
  peer_list_query_message_ = peer_list_query_message;
  if (peer_list_query_message) {
    set_has_peer_list_query_message();
  } else {
    clear_has_peer_list_query_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.GroupManagementMessage.peer_list_query_message)
}

// optional .freedm.broker.gm.PeerListMessage peer_list_message = 8;
inline bool GroupManagementMessage::has_peer_list_message() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GroupManagementMessage::set_has_peer_list_message() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GroupManagementMessage::clear_has_peer_list_message() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GroupManagementMessage::clear_peer_list_message() {
  if (peer_list_message_ != NULL) peer_list_message_->::freedm::broker::gm::PeerListMessage::Clear();
  clear_has_peer_list_message();
}
inline const ::freedm::broker::gm::PeerListMessage& GroupManagementMessage::peer_list_message() const {
  // @@protoc_insertion_point(field_get:freedm.broker.gm.GroupManagementMessage.peer_list_message)
  return peer_list_message_ != NULL ? *peer_list_message_ : *default_instance_->peer_list_message_;
}
inline ::freedm::broker::gm::PeerListMessage* GroupManagementMessage::mutable_peer_list_message() {
  set_has_peer_list_message();
  if (peer_list_message_ == NULL) peer_list_message_ = new ::freedm::broker::gm::PeerListMessage;
  // @@protoc_insertion_point(field_mutable:freedm.broker.gm.GroupManagementMessage.peer_list_message)
  return peer_list_message_;
}
inline ::freedm::broker::gm::PeerListMessage* GroupManagementMessage::release_peer_list_message() {
  clear_has_peer_list_message();
  ::freedm::broker::gm::PeerListMessage* temp = peer_list_message_;
  peer_list_message_ = NULL;
  return temp;
}
inline void GroupManagementMessage::set_allocated_peer_list_message(::freedm::broker::gm::PeerListMessage* peer_list_message) {
  delete peer_list_message_;
  peer_list_message_ = peer_list_message;
  if (peer_list_message) {
    set_has_peer_list_message();
  } else {
    clear_has_peer_list_message();
  }
  // @@protoc_insertion_point(field_set_allocated:freedm.broker.gm.GroupManagementMessage.peer_list_message)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gm
}  // namespace broker
}  // namespace freedm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GroupManagement_2eproto__INCLUDED
